<link rel="stylesheet" href="/css/style.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Mobile Menu Button -->
<button class="mobile-menu-btn" onclick="toggleMobileMenu()">
    <i class="fas fa-bars"></i>
</button>

<!-- Sidebar Overlay -->
<div class="sidebar-overlay" onclick="closeMobileMenu()"></div>

<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <h2><i class="fas fa-spa"></i> {{clinica.nome}}</h2>
        </div>

        <ul class="nav-menu">
            <li class="nav-item"><a href="/sistema/dashboard" class="nav-link"><i class="fas fa-home"></i>Inicio</a></li>
            <li class="nav-item"><a href="/sistema/agenda" class="nav-link"><i class="fas fa-calendar-alt"></i>Agenda</a></li>
            <li class="nav-item"><a href="/sistema/pacientes" class="nav-link"><i class="fas fa-users"></i>Pacientes</a></li>
            {{#unless (eq user.tipo_usuario 'atendente')}}
            <li class="nav-item"><a href="/sistema/atendimento" class="nav-link"><i class="fas fa-user-md"></i>Atendimentos</a></li>
            {{/unless}}
            <li class="nav-item"><a href="/sistema/financeiro" class="nav-link active"><i class="fas fa-dollar-sign"></i>Financeiro</a></li>
            {{#unless (eq user.tipo_usuario 'atendente')}}
            <li class="nav-item"><a href="/sistema/produtos" class="nav-link"><i class="fas fa-box"></i>Produtos</a></li>
            {{/unless}}
            {{#if (eq user.tipo_usuario 'admin')}}
            <li class="nav-item"><a href="/sistema/minha-clinica" class="nav-link"><i
                        class="fas fa-clinic-medical"></i>Minha Clínica</a></li>
            {{/if}}
        </ul>

        <!-- User Section -->
        <div class="sidebar-user">
            <div class="user-profile">
                <div><i class="fa-solid fa-user"></i></div>
                <div class="user-details">
                    <div class="user-name-sidebar">{{user.nome}}</div>
                    <div class="user-role">{{user.tipo_usuario}}</div>
                </div>
            </div>
            <a href="/sistema/logout" class="logout-btn">
                <i class="fas fa-sign-out-alt"></i>
                Sair
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content financeiro-container">
        <!-- Header -->
        <div class="financeiro-header">
            <h1 class="financeiro-title">
                <i class="fas fa-dollar-sign"></i>
                Controle Financeiro
            </h1>
            <button class="btn btn-primary" onclick="abrirModalComprovante()">
                <i class="fas fa-file-invoice"></i>
                Gerar Comprovante
            </button>
        </div>

        <!-- Filtros Modernos -->
        <div class="filters-section">
            <div class="period-filter-container">
                <div class="period-header">
                    <h3><i class="fas fa-calendar-alt"></i> Filtrar por Período</h3>
                    <button class="btn btn-primary btn-sm" onclick="atualizarDados()">
                        <i class="fas fa-sync-alt"></i> Atualizar
                    </button>
                </div>
                
                <div class="period-buttons">
                    <button class="period-btn" data-period="hoje" onclick="selecionarPeriodo('hoje')">
                        <i class="fas fa-calendar-day"></i>
                        <span>Hoje</span>
                    </button>
                    <button class="period-btn" data-period="semana" onclick="selecionarPeriodo('semana')">
                        <i class="fas fa-calendar-week"></i>
                        <span>Esta Semana</span>
                    </button>
                    <button class="period-btn active" data-period="mes" onclick="selecionarPeriodo('mes')">
                        <i class="fas fa-calendar"></i>
                        <span>Este Mês</span>
                    </button>
                    <button class="period-btn" data-period="ano" onclick="selecionarPeriodo('ano')">
                        <i class="fas fa-calendar-alt"></i>
                        <span>Este Ano</span>
                    </button>
                    <button class="period-btn" data-period="personalizado" onclick="selecionarPeriodo('personalizado')">
                        <i class="fas fa-calendar-plus"></i>
                        <span>Personalizado</span>
                    </button>
                </div>
                
                <div class="custom-date-range" id="customDateRange" style="display: none;">
                    <div class="date-inputs">
                        <div class="date-input-group">
                            <label class="date-label">Data Inicial</label>
                            <input type="date" id="dataInicio" class="date-input">
                        </div>
                        <div class="date-separator">
                            <i class="fas fa-arrow-right"></i>
                        </div>
                        <div class="date-input-group">
                            <label class="date-label">Data Final</label>
                            <input type="date" id="dataFim" class="date-input">
                        </div>
                        <button class="btn btn-success btn-sm" onclick="aplicarPeriodoPersonalizado()">
                            <i class="fas fa-check"></i> Aplicar
                        </button>
                    </div>
                </div>
                
                <!-- Campo hidden para manter compatibilidade -->
                <select id="periodoSelect" style="display: none;">
                    <option value="hoje">Hoje</option>
                    <option value="semana">Esta Semana</option>
                    <option value="mes" selected>Este Mês</option>
                    <option value="ano">Este Ano</option>
                    <option value="personalizado">Personalizado</option>
                </select>
            </div>
        </div>

        <!-- Cards de Resumo -->
        <div class="financial-section">
            <div class="financial-card">
                <h3><i class="fas fa-chart-line"></i> Receitas</h3>
                <div class="amount" id="totalReceitas">R$ 0,00</div>
                <div class="financial-details">
                    <div class="detail-item">
                        <div class="label">Quantidade</div>
                        <div class="value" id="quantidadeReceitas">0</div>
                    </div>
                    <div class="detail-item">
                        <div class="label">Média</div>
                        <div class="value" id="mediaReceitas">R$ 0,00</div>
                    </div>
                </div>
            </div>

            <div class="financial-card">
                <h3><i class="fas fa-clock"></i> Pendentes</h3>
                <div class="amount" id="totalPendentes" style="color: #f59e0b;">R$ 0,00</div>
                <div class="financial-details">
                    <div class="detail-item">
                        <div class="label">Quantidade</div>
                        <div class="value" id="quantidadePendentes">0</div>
                    </div>
                    <div class="detail-item">
                        <div class="label">Mais Antigo</div>
                        <div class="value" id="pendenteAntigo">-</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Gráficos -->
        <div class="charts-section">
            <div class="financial-card chart-main">
                <h3><i class="fas fa-chart-area"></i> Receitas por Dia</h3>
                <canvas id="receitasChart" width="400" height="200" style="max-height: 200px; height: 200px !important;"></canvas>
            </div>

            <div class="financial-card chart-secondary">
                <h3><i class="fas fa-chart-pie"></i> Procedimentos Populares</h3>
                <canvas id="procedimentosChart" width="300" height="200" style="max-height: 200px; height: 200px !important;"></canvas>
            </div>
        </div>

        <!-- Tabela de Receitas Recentes -->
        <div class="financial-card">
            <h3><i class="fas fa-list"></i> Receitas Recentes</h3>
            
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Paciente</th>
                            <th>Procedimento</th>
                            <th>Valor</th>
                            <th>Confirmado por</th>
                        </tr>
                    </thead>
                    <tbody id="receitasTableBody">
                        <!-- Dados carregados via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Tabela de Pendentes -->
        <div class="financial-card">
            <h3><i class="fas fa-exclamation-triangle"></i> Pagamentos Pendentes</h3>
            
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Data Agendamento</th>
                            <th>Paciente</th>
                            <th>Procedimento</th>
                            <th>Valor</th>
                            <th>Dias Pendente</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="pendentesTableBody">
                        <!-- Dados carregados via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal Comprovante de Pagamento -->
<div id="modalComprovante" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; justify-content: center; align-items: center;">
    <div style="background: white; border-radius: 8px; width: 95%; max-width: 800px; max-height: 90vh; overflow: hidden; display: flex; flex-direction: column;">
        <div style="padding: 20px; border-bottom: 1px solid #e5e7eb; display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0;"><i class="fas fa-file-invoice"></i> Gerar Comprovante de Pagamento</h3>
            <button onclick="fecharModalComprovante()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">&times;</button>
        </div>
        
        <div style="padding: 20px; flex: 1; overflow-y: auto;">
            <!-- Busca de Paciente -->
            <div style="margin-bottom: 20px;">
                <label class="form-label">Buscar Paciente</label>
                <div style="display: flex; gap: 10px;">
                    <input type="text" id="buscaPacienteComprovante" class="form-input" placeholder="Digite o nome ou CPF do paciente..." style="flex: 1;" onkeyup="buscarPacientesComprovante()">
                    <button class="btn btn-secondary" onclick="buscarPacientesComprovante()">
                        <i class="fas fa-search"></i> Buscar
                    </button>
                </div>
            </div>
            
            <!-- Lista de Pacientes -->
            <div id="listaPacientesComprovante" style="margin-bottom: 20px; display: none;">
                <h4>Selecione o Paciente:</h4>
                <div id="resultadosPacientes" style="max-height: 150px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px;">
                    <!-- Resultados da busca -->
                </div>
            </div>
            
            <!-- Pagamentos do Paciente -->
            <div id="pagamentosPacienteComprovante" style="display: none;">
                <h4 id="nomePacienteSelecionado">Pagamentos de:</h4>
                <div style="margin-bottom: 15px;">
                    <label style="display: flex; align-items: center; gap: 8px; font-weight: 600;">
                        <input type="checkbox" id="selecionarTodos" onchange="selecionarTodosPagamentos()"> 
                        Selecionar Todos
                    </label>
                </div>
                <div id="listaPagamentos" style="max-height: 300px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 4px; padding: 10px;">
                    <!-- Lista de pagamentos -->
                </div>
                
                <div style="margin-top: 20px; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>Total Selecionado: <span id="totalSelecionado">R$ 0,00</span></strong>
                    </div>
                    <button class="btn btn-success" onclick="gerarComprovante()" id="btnGerarComprovante" disabled>
                        <i class="fas fa-file-pdf"></i> Gerar Comprovante PDF
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Relatório Detalhado -->
<div id="modalRelatorio" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; justify-content: center; align-items: center;">
    <div style="background: white; border-radius: 8px; width: 95%; max-width: 1200px; max-height: 90vh; overflow: hidden; display: flex; flex-direction: column;">
        <div style="padding: 20px; border-bottom: 1px solid #e5e7eb; display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0;"><i class="fas fa-file-alt"></i> Relatório Detalhado</h3>
            <button onclick="fecharRelatorioDetalhado()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">&times;</button>
        </div>
        
        <div style="padding: 20px; border-bottom: 1px solid #e5e7eb;">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div class="form-group">
                    <label class="form-label">Data Início</label>
                    <input type="date" id="dataInicioRelatorio" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Data Fim</label>
                    <input type="date" id="dataFimRelatorio" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Status</label>
                    <select id="statusRelatorio" class="form-select">
                        <option value="">Todos</option>
                        <option value="pago">Pago</option>
                        <option value="pendente">Pendente</option>
                        <option value="cancelado">Cancelado</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Forma Pagamento</label>
                    <select id="formaPagamentoRelatorio" class="form-select">
                        <option value="">Todas</option>
                        <option value="dinheiro">Dinheiro</option>
                        <option value="cartao_credito">Cartão Crédito</option>
                        <option value="cartao_debito">Cartão Débito</option>
                        <option value="pix">PIX</option>
                        <option value="transferencia">Transferência</option>
                        <option value="cheque">Cheque</option>
                    </select>
                </div>
                <div class="form-group" style="display: flex; align-items: end;">
                    <button class="btn btn-primary" onclick="buscarRelatorioDetalhado()">
                        <i class="fas fa-search"></i> Buscar
                    </button>
                </div>
            </div>
        </div>
        
        <div style="flex: 1; overflow-y: auto; padding: 20px;">
            <div id="relatorioContent">
                <!-- Conteúdo do relatório carregado via JavaScript -->
            </div>
        </div>
    </div>
</div>

<script>
let receitasChart = null;
let procedimentosChart = null;
let isLoadingDashboard = false;
let periodoAtual = 'mes';
let dataInicioPersonalizada = null;
let dataFimPersonalizada = null;

// Carregar dados ao inicializar a página
document.addEventListener('DOMContentLoaded', function() {
    // Configurar observer para prevenir redimensionamento dos canvas
    const canvasReceitas = document.getElementById('receitasChart');
    const canvasProcedimentos = document.getElementById('procedimentosChart');
    
    if (canvasReceitas) {
        canvasReceitas.style.height = '200px';
        canvasReceitas.style.maxHeight = '200px';
    }
    
    if (canvasProcedimentos) {
        canvasProcedimentos.style.height = '200px';
        canvasProcedimentos.style.maxHeight = '200px';
    }
    
    carregarDashboard();
});

// Prevenir múltiplas chamadas simultâneas
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function carregarDashboard() {
    if (isLoadingDashboard) {
        console.log('Dashboard já está carregando, ignorando chamada duplicada');
        return;
    }
    
    isLoadingDashboard = true;
    
    // Construir URL com parâmetros apropriados
    let url = '/sistema/financeiro/dashboard';
    const params = new URLSearchParams();
    
    if (periodoAtual === 'personalizado' && dataInicioPersonalizada && dataFimPersonalizada) {
        params.append('periodo', 'personalizado');
        params.append('dataInicio', dataInicioPersonalizada);
        params.append('dataFim', dataFimPersonalizada);
    } else {
        params.append('periodo', periodoAtual);
    }
    
    url += '?' + params.toString();
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                atualizarResumo(data.data);
                atualizarGraficos(data.data);
                atualizarTabelaReceitas(data.data.receitas);
                atualizarTabelaPendentes(data.data.pendentes);
            } else {
                console.error('Erro ao carregar dashboard:', data.message);
            }
        })
        .catch(error => {
            console.error('Erro:', error);
        })
        .finally(() => {
            isLoadingDashboard = false;
        });
}

function atualizarResumo(data) {
    const { resumo } = data;
    
    document.getElementById('totalReceitas').textContent = formatarMoeda(resumo.totalReceitas);
    document.getElementById('quantidadeReceitas').textContent = resumo.quantidadeReceitas;
    document.getElementById('mediaReceitas').textContent = formatarMoeda(resumo.quantidadeReceitas > 0 ? resumo.totalReceitas / resumo.quantidadeReceitas : 0);
    
    document.getElementById('totalPendentes').textContent = formatarMoeda(resumo.totalPendentes);
    document.getElementById('quantidadePendentes').textContent = resumo.quantidadePendentes;
}

function atualizarGraficos(data) {
    // Gráfico de receitas por dia
    const canvasReceitas = document.getElementById('receitasChart');
    if (!canvasReceitas) {
        console.error('Canvas receitasChart não encontrado');
        return;
    }
    
    // Destruir gráfico anterior se existir
    if (receitasChart) {
        receitasChart.destroy();
        receitasChart = null;
    }
    
    // Limpar canvas
    const ctxReceitas = canvasReceitas.getContext('2d');
    ctxReceitas.clearRect(0, 0, canvasReceitas.width, canvasReceitas.height);
    
    const diasOrdenados = Object.keys(data.receitasPorDia).sort();
    const valoresReceitas = diasOrdenados.map(dia => data.receitasPorDia[dia]);
    
    receitasChart = new Chart(ctxReceitas, {
        type: 'line',
        data: {
            labels: diasOrdenados.map(dia => new Date(dia).toLocaleDateString('pt-BR')),
            datasets: [{
                label: 'Receitas',
                data: valoresReceitas,
                borderColor: '#2563eb',
                backgroundColor: 'rgba(37, 99, 235, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                duration: 0 // Desabilitar animações
            },
            interaction: {
                intersect: false
            },
            plugins: {
                legend: {
                    display: true
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return 'R$ ' + value.toFixed(2);
                        }
                    }
                }
            },
            onResize: function(chart, size) {
                // Prevenir redimensionamento automático
                chart.canvas.style.height = '200px';
            }
        }
    });
    
    // Gráfico de procedimentos populares
    const canvasProcedimentos = document.getElementById('procedimentosChart');
    if (!canvasProcedimentos) {
        console.error('Canvas procedimentosChart não encontrado');
        return;
    }
    
    // Destruir gráfico anterior se existir
    if (procedimentosChart) {
        procedimentosChart.destroy();
        procedimentosChart = null;
    }
    
    // Limpar canvas
    const ctxProcedimentos = canvasProcedimentos.getContext('2d');
    ctxProcedimentos.clearRect(0, 0, canvasProcedimentos.width, canvasProcedimentos.height);
    
    // Ordenar procedimentos por quantidade e pegar os top 5
    const procedimentosOrdenados = Object.entries(data.receitasPorProcedimento)
        .sort((a, b) => b[1].quantidade - a[1].quantidade)
        .slice(0, 5);
    
    const procedimentos = procedimentosOrdenados.map(([nome]) => nome);
    const quantidades = procedimentosOrdenados.map(([, dados]) => dados.quantidade);
    
    procedimentosChart = new Chart(ctxProcedimentos, {
        type: 'doughnut',
        data: {
            labels: procedimentos,
            datasets: [{
                data: quantidades,
                backgroundColor: [
                    '#2563eb',
                    '#10b981',
                    '#f59e0b',
                    '#ef4444',
                    '#8b5cf6'
                ]
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                duration: 0 // Desabilitar animações
            },
            interaction: {
                intersect: false
            },
            plugins: {
                legend: {
                    position: 'bottom'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const procedimento = context.label;
                            const quantidade = context.parsed;
                            const dados = data.receitasPorProcedimento[procedimento];
                            const total = dados ? dados.total : 0;
                            return `${procedimento}: ${quantidade} vezes (R$ ${total.toFixed(2)})`;
                        }
                    }
                }
            },
            onResize: function(chart, size) {
                // Prevenir redimensionamento automático
                chart.canvas.style.height = '200px';
            }
        }
    });
}

function atualizarTabelaReceitas(receitas) {
    const tbody = document.getElementById('receitasTableBody');
    tbody.innerHTML = '';
    
    receitas.slice(0, 10).forEach(receita => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${new Date(receita.data_pagamento).toLocaleDateString('pt-BR')}</td>
            <td>${receita.paciente?.nome || 'N/A'}</td>
            <td>${receita.agendamento?.produto?.nome || 'Procedimento'}</td>
            <td>${formatarMoeda(receita.valor_final)}</td>
            <td>${receita.confirmador?.nome || 'N/A'}</td>
        `;
        tbody.appendChild(row);
    });
}

function atualizarTabelaPendentes(pendentes) {
    const tbody = document.getElementById('pendentesTableBody');
    tbody.innerHTML = '';
    
    pendentes.slice(0, 10).forEach(pendente => {
        const diasPendente = Math.floor((new Date() - new Date(pendente.criado_em)) / (1000 * 60 * 60 * 24));
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${pendente.agendamento?.data_agendamento ? new Date(pendente.agendamento.data_agendamento).toLocaleDateString('pt-BR') : 'N/A'}</td>
            <td>${pendente.paciente?.nome || 'N/A'}</td>
            <td>${pendente.agendamento?.produto?.nome || 'Procedimento'}</td>
            <td>${formatarMoeda(pendente.valor_final)}</td>
            <td>${diasPendente} dias</td>
            <td>
                <button class="btn-small btn-success" onclick="confirmarPagamentoPendente(${pendente.agendamento_id})">
                    <i class="fas fa-check"></i> Confirmar
                </button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// Criar versão com debounce para evitar chamadas excessivas
const debouncedCarregarDashboard = debounce(carregarDashboard, 300);

function atualizarDados() {
    if (!isLoadingDashboard) {
        carregarDashboard();
    }
}

// Funções do Modal de Comprovante
let pacienteSelecionado = null;
let pagamentosSelecionados = [];

function abrirModalComprovante() {
    document.getElementById('modalComprovante').style.display = 'flex';
    limparModalComprovante();
}

function fecharModalComprovante() {
    document.getElementById('modalComprovante').style.display = 'none';
    limparModalComprovante();
}

function limparModalComprovante() {
    document.getElementById('buscaPacienteComprovante').value = '';
    document.getElementById('listaPacientesComprovante').style.display = 'none';
    document.getElementById('pagamentosPacienteComprovante').style.display = 'none';
    pacienteSelecionado = null;
    pagamentosSelecionados = [];
    atualizarTotalSelecionado();
}

function buscarPacientesComprovante() {
    const termo = document.getElementById('buscaPacienteComprovante').value.trim();
    
    if (termo.length < 2) {
        document.getElementById('listaPacientesComprovante').style.display = 'none';
        return;
    }
    
    fetch(`/sistema/pacientes/selecao?busca=${encodeURIComponent(termo)}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                exibirResultadosPacientes(data.data);
            } else {
                console.error('Erro ao buscar pacientes:', data.message);
            }
        })
        .catch(error => {
            console.error('Erro:', error);
        });
}

function exibirResultadosPacientes(pacientes) {
    const container = document.getElementById('resultadosPacientes');
    
    if (pacientes.length === 0) {
        container.innerHTML = '<div style="padding: 10px; text-align: center; color: #6b7280;">Nenhum paciente encontrado</div>';
    } else {
        container.innerHTML = pacientes.map(paciente => `
            <div style="padding: 10px; border-bottom: 1px solid #f3f4f6; cursor: pointer; hover: background-color: #f9fafb;" 
                 onclick="selecionarPaciente(${paciente.id}, '${paciente.nome}', '${paciente.cpf}')">
                <div style="font-weight: 600;">${paciente.nome}</div>
                <div style="font-size: 14px; color: #6b7280;">CPF: ${paciente.cpf}</div>
            </div>
        `).join('');
    }
    
    document.getElementById('listaPacientesComprovante').style.display = 'block';
}

function selecionarPaciente(id, nome, cpf) {
    pacienteSelecionado = { id, nome, cpf };
    document.getElementById('listaPacientesComprovante').style.display = 'none';
    document.getElementById('nomePacienteSelecionado').textContent = `Pagamentos de: ${nome}`;
    
    buscarPagamentosPaciente(id);
}

function buscarPagamentosPaciente(pacienteId) {
    fetch(`/sistema/financeiro/pagamentos-paciente/${pacienteId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                exibirPagamentosPaciente(data.data);
            } else {
                console.error('Erro ao buscar pagamentos:', data.message);
            }
        })
        .catch(error => {
            console.error('Erro:', error);
        });
}

function exibirPagamentosPaciente(pagamentos) {
    const container = document.getElementById('listaPagamentos');
    
    if (pagamentos.length === 0) {
        container.innerHTML = '<div style="text-align: center; color: #6b7280; padding: 20px;">Nenhum pagamento encontrado para este paciente</div>';
    } else {
        container.innerHTML = pagamentos.map(pagamento => `
            <div style="padding: 10px; border: 1px solid #e5e7eb; border-radius: 4px; margin-bottom: 10px; background: ${pagamento.status === 'pago' ? '#f0f9ff' : '#fef3c7'};">
                <label style="display: flex; align-items: center; gap: 10px; cursor: pointer;">
                    <input type="checkbox" value="${pagamento.id}" onchange="togglePagamento(${pagamento.id}, ${pagamento.valor_final})">
                    <div style="flex: 1;">
                        <div style="font-weight: 600;">${pagamento.agendamento?.produto?.nome || 'Procedimento'}</div>
                        <div style="font-size: 14px; color: #6b7280;">
                            Data: ${pagamento.data_pagamento ? new Date(pagamento.data_pagamento).toLocaleDateString('pt-BR') : 'Pendente'} | 
                            Status: ${pagamento.status === 'pago' ? 'Pago' : 'Pendente'} | 
                            Valor: ${formatarMoeda(pagamento.valor_final)}
                        </div>
                    </div>
                </label>
            </div>
        `).join('');
    }
    
    document.getElementById('pagamentosPacienteComprovante').style.display = 'block';
    pagamentosSelecionados = [];
    atualizarTotalSelecionado();
}

function togglePagamento(pagamentoId, valor) {
    const checkbox = document.querySelector(`input[value="${pagamentoId}"]`);
    
    if (checkbox.checked) {
        if (!pagamentosSelecionados.find(p => p.id === pagamentoId)) {
            pagamentosSelecionados.push({ id: pagamentoId, valor: parseFloat(valor) });
        }
    } else {
        pagamentosSelecionados = pagamentosSelecionados.filter(p => p.id !== pagamentoId);
    }
    
    atualizarTotalSelecionado();
}

function selecionarTodosPagamentos() {
    const selecionarTodos = document.getElementById('selecionarTodos').checked;
    const checkboxes = document.querySelectorAll('#listaPagamentos input[type="checkbox"]');
    
    pagamentosSelecionados = [];
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = selecionarTodos;
        if (selecionarTodos) {
            const valor = parseFloat(checkbox.closest('div').querySelector('div').textContent.match(/R\$ ([\d.,]+)/)[1].replace(',', '.'));
            pagamentosSelecionados.push({ id: parseInt(checkbox.value), valor });
        }
    });
    
    atualizarTotalSelecionado();
}

function atualizarTotalSelecionado() {
    const total = pagamentosSelecionados.reduce((sum, p) => sum + p.valor, 0);
    document.getElementById('totalSelecionado').textContent = formatarMoeda(total);
    document.getElementById('btnGerarComprovante').disabled = pagamentosSelecionados.length === 0;
}

function gerarComprovante() {
    if (!pacienteSelecionado || pagamentosSelecionados.length === 0) {
        alert('Selecione um paciente e pelo menos um pagamento.');
        return;
    }
    
    const dados = {
        paciente: pacienteSelecionado,
        pagamentos: pagamentosSelecionados.map(p => p.id)
    };
    
    // Criar formulário para enviar dados via POST em nova aba
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/sistema/financeiro/gerar-comprovante';
    form.target = '_blank';
    
    // Adicionar dados como campos hidden
    const inputPaciente = document.createElement('input');
    inputPaciente.type = 'hidden';
    inputPaciente.name = 'paciente';
    inputPaciente.value = JSON.stringify(dados.paciente);
    form.appendChild(inputPaciente);
    
    const inputPagamentos = document.createElement('input');
    inputPagamentos.type = 'hidden';
    inputPagamentos.name = 'pagamentos';
    inputPagamentos.value = JSON.stringify(dados.pagamentos);
    form.appendChild(inputPagamentos);
    
    // Adicionar ao DOM e submeter
    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);
    
    alert('Comprovante aberto em nova aba. Use Ctrl+P para imprimir ou salvar como PDF.');
    fecharModalComprovante();
}

// Funções do Filtro de Período Moderno
function selecionarPeriodo(periodo) {
    // Remover classe active de todos os botões
    document.querySelectorAll('.period-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Adicionar classe active ao botão selecionado
    document.querySelector(`[data-period="${periodo}"]`).classList.add('active');
    
    // Atualizar período atual
    periodoAtual = periodo;
    
    // Atualizar select hidden para compatibilidade
    document.getElementById('periodoSelect').value = periodo;
    
    // Mostrar/ocultar campos de data personalizada
    const customDateRange = document.getElementById('customDateRange');
    if (periodo === 'personalizado') {
        customDateRange.style.display = 'block';
        // Definir datas padrão (último mês)
        const hoje = new Date();
        const mesPassado = new Date(hoje.getFullYear(), hoje.getMonth() - 1, hoje.getDate());
        document.getElementById('dataInicio').value = mesPassado.toISOString().split('T')[0];
        document.getElementById('dataFim').value = hoje.toISOString().split('T')[0];
    } else {
        customDateRange.style.display = 'none';
        dataInicioPersonalizada = null;
        dataFimPersonalizada = null;
        // Carregar dados automaticamente para períodos pré-definidos
        debouncedCarregarDashboard();
    }
}

function aplicarPeriodoPersonalizado() {
    const dataInicio = document.getElementById('dataInicio').value;
    const dataFim = document.getElementById('dataFim').value;
    
    if (!dataInicio || !dataFim) {
        alert('Por favor, selecione ambas as datas.');
        return;
    }
    
    if (new Date(dataInicio) > new Date(dataFim)) {
        alert('A data inicial deve ser anterior à data final.');
        return;
    }
    
    dataInicioPersonalizada = dataInicio;
    dataFimPersonalizada = dataFim;
    
    // Carregar dados com período personalizado
    debouncedCarregarDashboard();
}

function abrirRelatorioDetalhado() {
    document.getElementById('modalRelatorio').style.display = 'flex';
    
    // Definir datas padrão (último mês)
    const hoje = new Date();
    const mesPassado = new Date(hoje.getFullYear(), hoje.getMonth() - 1, hoje.getDate());
    
    document.getElementById('dataInicioRelatorio').value = mesPassado.toISOString().split('T')[0];
    document.getElementById('dataFimRelatorio').value = hoje.toISOString().split('T')[0];
    
    buscarRelatorioDetalhado();
}

function fecharRelatorioDetalhado() {
    document.getElementById('modalRelatorio').style.display = 'none';
}

function buscarRelatorioDetalhado() {
    const dataInicio = document.getElementById('dataInicioRelatorio').value;
    const dataFim = document.getElementById('dataFimRelatorio').value;
    const status = document.getElementById('statusRelatorio').value;
    const formaPagamento = document.getElementById('formaPagamentoRelatorio').value;
    
    const params = new URLSearchParams();
    if (dataInicio) params.append('dataInicio', dataInicio);
    if (dataFim) params.append('dataFim', dataFim);
    if (status) params.append('status', status);
    if (formaPagamento) params.append('formaPagamento', formaPagamento);
    
    fetch(`/sistema/financeiro/relatorio?${params.toString()}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                exibirRelatorioDetalhado(data.data);
            } else {
                console.error('Erro ao buscar relatório:', data.message);
            }
        })
        .catch(error => {
            console.error('Erro:', error);
        });
}

function exibirRelatorioDetalhado(data) {
    const content = document.getElementById('relatorioContent');
    
    let html = `
        <div style="margin-bottom: 20px;">
            <h4>Resumo do Período</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;">
                <div style="background: #f3f4f6; padding: 15px; border-radius: 6px; text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; color: #2563eb;">${data.pagination.totalItems}</div>
                    <div style="color: #6b7280;">Total de Registros</div>
                </div>
            </div>
        </div>
        
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Paciente</th>
                        <th>CPF</th>
                        <th>Procedimento</th>
                        <th>Profissional</th>
                        <th>Forma Pagamento</th>
                        <th>Status</th>
                        <th>Valor</th>
                        <th>Confirmado por</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    data.pagamentos.forEach(pagamento => {
        html += `
            <tr>
                <td>${pagamento.data_pagamento ? new Date(pagamento.data_pagamento).toLocaleDateString('pt-BR') : 'N/A'}</td>
                <td>${pagamento.paciente?.nome || 'N/A'}</td>
                <td>${pagamento.paciente?.cpf || 'N/A'}</td>
                <td>${pagamento.agendamento?.produto?.nome || 'Procedimento'}</td>
                <td>${pagamento.agendamento?.profissional?.nome || 'N/A'}</td>
                <td>${formatarFormaPagamento(pagamento.forma_pagamento)}</td>
                <td><span class="status-${pagamento.status}">${formatarStatus(pagamento.status)}</span></td>
                <td>${formatarMoeda(pagamento.valor_final)}</td>
                <td>${pagamento.confirmador?.nome || 'N/A'}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
    `;
    
    content.innerHTML = html;
}

function confirmarPagamentoPendente(agendamentoId) {
    if (confirm('Confirmar o pagamento deste procedimento?')) {
        fetch(`/sistema/agendamentos/${agendamentoId}/pagamento`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                metodo_pagamento: 'dinheiro'
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Pagamento confirmado com sucesso!');
                carregarDashboard();
            } else {
                alert('Erro ao confirmar pagamento: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Erro ao confirmar pagamento');
        });
    }
}

// Funções utilitárias
function formatarMoeda(valor) {
    return new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
    }).format(valor || 0);
}

// Função formatarFormaPagamento removida - não mais necessária

function formatarStatus(status) {
    const statuses = {
        'pago': 'Pago',
        'pendente': 'Pendente',
        'cancelado': 'Cancelado',
        'estornado': 'Estornado'
    };
    return statuses[status] || status;
}
</script>

<style>
/* Header Financeiro */
.financeiro-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #e5e7eb;
}

.financeiro-title {
    font-size: 28px;
    font-weight: 700;
    color: #1e293b;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.financeiro-title i {
    color: #2563eb;
}

/* Seção de Gráficos */
.charts-section {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 30px;
    margin-bottom: 30px;
}

.chart-main {
    min-height: 280px;
}

.chart-secondary {
    min-height: 280px;
}

/* Ajustes de Espaçamento */
.filters-section {
    margin-bottom: 30px;
}

/* Estilos do Filtro de Período Moderno */
.period-filter-container {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
}

.period-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #f3f4f6;
}

.period-header h3 {
    margin: 0;
    color: #374151;
    font-size: 18px;
    font-weight: 600;
}

.period-header h3 i {
    color: #2563eb;
    margin-right: 8px;
}

.period-buttons {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    margin-bottom: 20px;
}

.period-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 6px;
    padding: 12px 16px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    background: white;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 100px;
    font-size: 14px;
}

.period-btn:hover {
    border-color: #2563eb;
    color: #2563eb;
    background: #f0f9ff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.15);
}

.period-btn.active {
    border-color: #2563eb;
    background: #2563eb;
    color: white;
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
}

.period-btn i {
    font-size: 18px;
}

.period-btn span {
    font-weight: 500;
}

.custom-date-range {
    margin-top: 20px;
    padding: 20px;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
}

.date-inputs {
    display: flex;
    align-items: end;
    gap: 15px;
    flex-wrap: wrap;
}

.date-input-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
}

.date-label {
    font-size: 14px;
    font-weight: 500;
    color: #374151;
}

.date-input {
    padding: 10px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background: white;
    transition: border-color 0.3s ease;
    min-width: 150px;
}

.date-input:focus {
    outline: none;
    border-color: #2563eb;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.date-separator {
    display: flex;
    align-items: center;
    color: #6b7280;
    font-size: 16px;
    margin: 0 5px;
}

.btn-sm {
    padding: 8px 16px;
    font-size: 14px;
}

@media (max-width: 768px) {
    .period-buttons {
        justify-content: center;
    }
    
    .period-btn {
        min-width: 80px;
        padding: 10px 12px;
    }
    
    .date-inputs {
        flex-direction: column;
        align-items: stretch;
    }
    
    .date-separator {
        align-self: center;
        transform: rotate(90deg);
    }
}

.financial-section {
    margin-bottom: 30px;
}

.financial-card {
    margin-bottom: 30px;
}

.status-pago {
    background: #dcfce7;
    color: #166534;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
}

.status-pendente {
    background: #fef3c7;
    color: #92400e;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
}

.status-cancelado {
    background: #fee2e2;
    color: #991b1b;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
}

.status-estornado {
    background: #f3f4f6;
    color: #374151;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
}

.table-container {
    max-height: 400px;
    overflow-y: auto;
}

.btn-small {
    padding: 4px 8px;
    font-size: 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 4px;
}

.btn-success {
    background: #10b981;
    color: white;
}

.btn-success:hover {
    background: #059669;
}
</style>

<script src="/js/menuMobile.js"></script>