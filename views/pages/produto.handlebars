
```

<link rel="stylesheet" href="/css/style.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- Mobile Menu Button -->
    <button class="mobile-menu-btn" onclick="toggleMobileMenu()">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" onclick="closeMobileMenu()"></div>

    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <h2><i class="fas fa-spa"></i> {{clinica.nome}}</h2>
            </div>

            <ul class="nav-menu">
                <li class="nav-item"><a href="/sistema/dashboard" class="nav-link"><i class="fas fa-home"></i>Inicio</a></li>
                <li class="nav-item"><a href="/sistema/agenda" class="nav-link"><i class="fas fa-calendar-alt"></i>Agenda</a></li>
                <li class="nav-item"><a href="/sistema/pacientes" class="nav-link"><i class="fas fa-users"></i>Pacientes</a></li>
                <li class="nav-item"><a href="/sistema/atendimento" class="nav-link"><i class="fas fa-user-md"></i>Atendimentos</a></li>
                <li class="nav-item"><a href="/sistema/financeiro" class="nav-link"><i class="fas fa-dollar-sign"></i>Financeiro</a></li>
                <li class="nav-item"><a href="/sistema/produtos" class="nav-link active"><i class="fas fa-box"></i>Produtos</a></li>
                <li class="nav-item"><a href="/sistema/minhaClinica" class="nav-link"><i class="fas fa-clinic-medical"></i>Minha Clínica</a></li>
            </ul>

            <!-- User Section -->
            <div class="sidebar-user">
                <div class="user-profile">
                    <div><i class="fa-solid fa-user"></i></div>
                    <div class="user-details">
                        <div class="user-name-sidebar">{{user.nome}}</div>
                        <div class="user-role">{{user.tipo_usuario}}</div>
                    </div>
                </div>
                <a href="/sistema/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    Sair
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <h1 class="page-title">
                    <i class="fas fa-box"></i>
                    Produtos e Serviços
                </h1>
            </div>

            <!-- Abas de Categorias -->
            <div class="products-tabs">
                <div class="tab-buttons">
                    <div class="tab-btn active" onclick="switchTab('procedures')">
                        <i class="fas fa-user-md"></i>
                        Procedimentos
                    </div>
                    <div class="tab-btn" onclick="switchTab('medications')">
                        <i class="fas fa-pills"></i>
                        Medicamentos
                    </div>
                    <div class="tab-btn" onclick="switchTab('supplements')">
                        <i class="fas fa-capsules"></i>
                        Suplementos
                    </div>

                </div>
            </div>

            <!-- Filtros -->
            <div class="filter-section">
                <h5 style="margin-bottom: 15px; color: #1e293b;">
                    <i class="fas fa-filter"></i>
                    Filtros
                </h5>
                <div class="filter-row">
                    <div class="form-group">
                        <label class="form-label">Buscar</label>
                        <input type="text" id="searchInput" class="form-input" placeholder="Digite o nome do produto...">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Categoria</label>
                        <select id="categoryFilter" class="form-select">
                            <option value="">Todas</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Faixa de Preço</label>
                        <select id="priceFilter" class="form-select">
                            <option value="">Todos</option>
                            <option value="0-50">R$ 0 - R$ 50</option>
                            <option value="50-100">R$ 50 - R$ 100</option>
                            <option value="100-200">R$ 100 - R$ 200</option>
                            <option value="200+">Acima de R$ 200</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-secondary" onclick="applyFilters()">
                            <i class="fas fa-search"></i>
                            Filtrar
                        </button>
                    </div>
                </div>
            </div>

            <!-- Conteúdo das Abas -->
            
            <!-- Procedimentos -->
            <div id="procedures" class="tab-content active">
                <div class="products-container">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
                        <h4 style="margin: 0; color: #1e293b;">
                            <i class="fas fa-user-md"></i>
                            Procedimentos
                        </h4>
                        <button class="new-product-btn" onclick="createNewProduct('procedure')">
                            <i class="fas fa-plus"></i>
                            Novo Procedimento
                        </button>
                    </div>
                    
                    <div id="proceduresContainer">
                        <!-- Procedimentos serão carregados via JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Medicamentos -->
            <div id="medications" class="tab-content">
                <div class="products-container">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
                        <h4 style="margin: 0; color: #1e293b;">
                            <i class="fas fa-pills"></i>
                            Medicamentos
                        </h4>
                        <button class="new-product-btn" onclick="createNewProduct('medication')">
                            <i class="fas fa-plus"></i>
                            Novo Medicamento
                        </button>
                    </div>
                    
                    <div id="medicationsContainer">
                        <!-- Medicamentos serão carregados via JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Suplementos -->
            <div id="supplements" class="tab-content">
                <div class="products-container">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
                        <h4 style="margin: 0; color: #1e293b;">
                            <i class="fas fa-capsules"></i>
                            Suplementos
                        </h4>
                        <button class="new-product-btn" onclick="createNewProduct('supplement')">
                            <i class="fas fa-plus"></i>
                            Novo Suplemento
                        </button>
                    </div>
                    
                    <div id="supplementsContainer">
                        <!-- Suplementos serão carregados via JavaScript -->
                    </div>
                </div>
            </div>



            <!-- Estado Vazio -->
            <div class="empty-state" id="emptyState" style="display: none;">
                <i class="fas fa-box"></i>
                <h4>Nenhum produto encontrado</h4>
                <p>Não há produtos para os filtros selecionados</p>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/shared.js"></script>
    <script>
        // Dados dos produtos
        let products = {
            procedures: [],
            medications: [],
            supplements: []
        };

        let currentTab = 'procedures';
        let filteredProducts = {};

        // Inicializar página
        document.addEventListener('DOMContentLoaded', function() {
            initializeFilters();
            loadProducts();
        });
        
        // Carregar produtos do banco de dados
        async function loadProducts() {
            try {
                console.log('Iniciando carregamento de produtos...');
                showLoading();
                
                // Carregar procedimentos
                console.log('Carregando procedimentos...');
                const proceduresResponse = await fetch('/sistema/produtos/api?categoria=procedimento');
                console.log('Response procedimentos:', proceduresResponse.status, proceduresResponse.ok);
                
                if (proceduresResponse.ok) {
                    const proceduresData = await proceduresResponse.json();
                    console.log('Dados procedimentos:', proceduresData);
                    
                    if (proceduresData.success && proceduresData.data) {
                        products.procedures = proceduresData.data.map(mapProdutoToProcedure);
                        console.log('Procedimentos mapeados:', products.procedures);
                    } else {
                        console.warn('Resposta de procedimentos sem dados:', proceduresData);
                        products.procedures = [];
                    }
                } else {
                    console.error('Erro ao carregar procedimentos:', proceduresResponse.status);
                    const errorText = await proceduresResponse.text();
                    console.error('Erro detalhado:', errorText);
                    products.procedures = [];
                }
                
                // Carregar medicamentos
                console.log('Carregando medicamentos...');
                const medicationsResponse = await fetch('/sistema/produtos/api?categoria=medicamento');
                if (medicationsResponse.ok) {
                    const medicationsData = await medicationsResponse.json();
                    if (medicationsData.success && medicationsData.data) {
                        products.medications = medicationsData.data.map(mapProdutoToMedication);
                    } else {
                        products.medications = [];
                    }
                } else {
                    products.medications = [];
                }
                
                // Carregar suplementos
                console.log('Carregando suplementos...');
                const supplementsResponse = await fetch('/sistema/produtos/api?categoria=suplemento');
                if (supplementsResponse.ok) {
                    const supplementsData = await supplementsResponse.json();
                    if (supplementsData.success && supplementsData.data) {
                        products.supplements = supplementsData.data.map(mapProdutoToSupplement);
                    } else {
                        products.supplements = [];
                    }
                } else {
                    products.supplements = [];
                }
                
                console.log('Produtos carregados:', products);
                hideLoading();
                updateCategoryFilter();
                filterProducts();
                renderProducts();
                
            } catch (error) {
                console.error('Erro ao carregar produtos:', error);
                hideLoading();
                if (typeof Notification !== 'undefined') {
                    Notification.error('Erro ao carregar produtos: ' + error.message);
                } else {
                    alert('Erro ao carregar produtos: ' + error.message);
                }
            }
        }
        
        // Mapear produto do banco para formato de procedimento
        function mapProdutoToProcedure(produto) {
            return {
                id: produto.id,
                name: produto.nome,
                category: produto.categoria || 'Geral',
                price: parseFloat(produto.preco),
                duration: produto.duracao_minutos || 0,
                description: produto.descricao || '',
                materials: produto.observacoes || ''
            };
        }
        
        // Mapear produto do banco para formato de medicamento
        function mapProdutoToMedication(produto) {
            // Extrair concentração da descrição se estiver lá
            let concentration = '';
            let description = produto.descricao || '';
            
            if (description.includes('Concentração:')) {
                const concentrationMatch = description.match(/Concentração:\s*([^\n]+)/);
                if (concentrationMatch) {
                    concentration = concentrationMatch[1].trim();
                    // Remover a linha de concentração da descrição
                    description = description.replace(/Concentração:\s*[^\n]+\n?/, '').trim();
                }
            }
            
            return {
                id: produto.id,
                name: produto.nome,
                category: produto.categoria || 'Geral',
                price: parseFloat(produto.preco),
                concentration: concentration,
                volume: produto.unidade_medida || '',
                description: description,
                usage: produto.observacoes || ''
            };
        }
        
        // Mapear produto do banco para formato de suplemento
        function mapProdutoToSupplement(produto) {
            // Extrair dosagem da descrição se estiver lá
            let dosage = '';
            let description = produto.descricao || '';
            
            if (description.includes('Dosagem:')) {
                const dosageMatch = description.match(/Dosagem:\s*([^\n]+)/);
                if (dosageMatch) {
                    dosage = dosageMatch[1].trim();
                    // Remover a linha de dosagem da descrição
                    description = description.replace(/Dosagem:\s*[^\n]+\n?/, '').trim();
                }
            }
            
            return {
                id: produto.id,
                name: produto.nome,
                category: produto.categoria || 'Geral',
                price: parseFloat(produto.preco),
                form: produto.unidade_medida || '',
                dosage: dosage,
                usage: produto.observacoes || '',
                description: description,
                benefits: ''
            };
        }
        
        // Mostrar loading
        function showLoading() {
            const containers = ['proceduresContainer', 'medicationsContainer', 'supplementsContainer'];
            containers.forEach(containerId => {
                const container = document.getElementById(containerId);
                if (container) {
                    container.innerHTML = '<div style="text-align: center; padding: 40px; color: #6b7280;"><i class="fas fa-spinner fa-spin" style="font-size: 24px; margin-bottom: 10px;"></i><br>Carregando produtos...</div>';
                }
            });
        }
        
        // Esconder loading
        function hideLoading() {
            // O loading será substituído pelo conteúdo real quando renderProducts() for chamado
        }

        // Inicializar filtros
        function initializeFilters() {
            // Busca em tempo real
            new SearchFilter({
                searchInputId: 'searchInput',
                filterSelects: ['categoryFilter', 'priceFilter'],
                onSearch: filterProducts,
                debounceTime: 300
            });

            // Atualizar opções de categoria baseado na aba ativa
            updateCategoryFilter();
        }

        // Atualizar filtro de categoria
        function updateCategoryFilter() {
            const categoryFilter = document.getElementById('categoryFilter');
            const categories = new Set();
            
            products[currentTab].forEach(product => {
                if (product.category) {
                    categories.add(product.category);
                }
            });
            
            categoryFilter.innerHTML = '<option value="">Todas</option>';
            categories.forEach(category => {
                categoryFilter.innerHTML += `<option value="${category}">${category}</option>`;
            });
        }

        // Trocar aba
        function switchTab(tabName) {
            // Atualizar botões
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            event.target.closest('.tab-btn').classList.add('active');
            
            // Atualizar conteúdo
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');
            
            currentTab = tabName;
            updateCategoryFilter();
            filterProducts();
            renderProducts();
        }

        // Filtrar produtos
        function filterProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const category = document.getElementById('categoryFilter').value;
            const priceRange = document.getElementById('priceFilter').value;
            
            filteredProducts[currentTab] = products[currentTab].filter(product => {
                const matchesSearch = !searchTerm || 
                    product.name.toLowerCase().includes(searchTerm) ||
                    (product.description && product.description.toLowerCase().includes(searchTerm));
                
                const matchesCategory = !category || product.category === category;
                
                let matchesPrice = true;
                if (priceRange && product.price !== undefined) {
                    const price = product.finalPrice || product.price;
                    if (priceRange === '0-50') matchesPrice = price <= 50;
                    else if (priceRange === '50-100') matchesPrice = price > 50 && price <= 100;
                    else if (priceRange === '100-200') matchesPrice = price > 100 && price <= 200;
                    else if (priceRange === '200+') matchesPrice = price > 200;
                }
                
                return matchesSearch && matchesCategory && matchesPrice;
            });
            
            renderProducts();
        }

        // Renderizar produtos
        function renderProducts() {
            const container = document.getElementById(currentTab + 'Container');
            const emptyState = document.getElementById('emptyState');
            const currentProducts = filteredProducts[currentTab] || products[currentTab];
            
            if (currentProducts.length === 0) {
                container.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }
            
            container.style.display = 'block';
            emptyState.style.display = 'none';
            
            container.innerHTML = currentProducts.map(product => {
                switch(currentTab) {
                    case 'procedures':
                        return renderProcedure(product);
                    case 'medications':
                        return renderMedication(product);
                    case 'supplements':
                        return renderSupplement(product);

                    default:
                        return '';
                }
            }).join('');
        }

        // Renderizar procedimento
        function renderProcedure(procedure) {
            return `
                <div class="product-card procedure">
                    <div class="product-header">
                        <div>
                            <div class="product-title">${procedure.name}</div>
                            <div class="product-category">${procedure.category}</div>
                        </div>
                        <div class="product-price">${formatCurrency(procedure.price)}</div>
                    </div>
                    
                    <div class="product-content">
                        <div class="product-details">
                            <div class="detail-item">
                                <i class="fas fa-clock"></i>
                                <span class="detail-label">Duração:</span>
                                <span class="detail-value">${procedure.duration} min</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-tools"></i>
                                <span class="detail-label">Materiais:</span>
                                <span class="detail-value">${procedure.materials}</span>
                            </div>
                        </div>
                        
                        <div class="product-description">
                            <p><strong>Descrição:</strong> ${procedure.description || 'Sem descrição'}</p>
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        <button class="product-btn edit" onclick="editProduct('procedure', ${procedure.id})">
                            <i class="fas fa-edit"></i>
                            Editar
                        </button>
                        <button class="product-btn delete" onclick="deleteProduct('procedure', ${procedure.id})">
                            <i class="fas fa-trash"></i>
                            Excluir
                        </button>
                    </div>
                </div>
            `;
        }

        // Renderizar medicamento
        function renderMedication(medication) {
            return `
                <div class="product-card medication">
                    <div class="product-header">
                        <div>
                            <div class="product-title">${medication.name}</div>
                            <div class="product-category">${medication.category}</div>
                        </div>
                        <div class="product-price">${formatCurrency(medication.price)}</div>
                    </div>
                    
                    <div class="product-content">
                        <div class="product-details">
                            <div class="detail-item">
                                <i class="fas fa-percentage"></i>
                                <span class="detail-label">Concentração:</span>
                                <span class="detail-value">${medication.concentration || 'Não informado'}</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-flask"></i>
                                <span class="detail-label">Volume:</span>
                                <span class="detail-value">${medication.volume || 'Não informado'}</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-instructions"></i>
                                <span class="detail-label">Uso:</span>
                                <span class="detail-value">${medication.usage || 'Não informado'}</span>
                            </div>
                        </div>
                        
                        <div class="product-description">
                            <p><strong>Descrição:</strong> ${medication.description || 'Sem descrição'}</p>
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        <button class="product-btn edit" onclick="editProduct('medication', ${medication.id})">
                            <i class="fas fa-edit"></i>
                            Editar
                        </button>
                        <button class="product-btn delete" onclick="deleteProduct('medication', ${medication.id})">
                            <i class="fas fa-trash"></i>
                            Excluir
                        </button>
                    </div>
                </div>
            `;
        }

        // Renderizar suplemento
        function renderSupplement(supplement) {
            return `
                <div class="product-card supplement">
                    <div class="product-header">
                        <div>
                            <div class="product-title">${supplement.name}</div>
                            <div class="product-category">${supplement.category}</div>
                        </div>
                        <div class="product-price">${formatCurrency(supplement.price)}</div>
                    </div>
                    
                    <div class="product-content">
                        <div class="product-details">
                            <div class="detail-item">
                                <i class="fas fa-pills"></i>
                                <span class="detail-label">Forma:</span>
                                <span class="detail-value">${supplement.form}</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-weight"></i>
                                <span class="detail-label">Dosagem:</span>
                                <span class="detail-value">${supplement.dosage}</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-instructions"></i>
                                <span class="detail-label">Uso:</span>
                                <span class="detail-value">${supplement.usage}</span>
                            </div>
                        </div>
                        
                        <div class="product-description">
                            <p><strong>Descrição:</strong> ${supplement.description}</p>
                            <p><strong>Benefícios:</strong> ${supplement.benefits}</p>
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        <button class="product-btn edit" onclick="editProduct('supplement', ${supplement.id})">
                            <i class="fas fa-edit"></i>
                            Editar
                        </button>
                        <button class="product-btn delete" onclick="deleteProduct('supplement', ${supplement.id})">
                            <i class="fas fa-trash"></i>
                            Excluir
                        </button>
                    </div>
                </div>
            `;
        }



        // Aplicar filtros
        function applyFilters() {
            filterProducts();
        }

        // Criar novo produto
        function createNewProduct(type) {
            if (type === 'procedure') {
                showCreateProcedureModal();
            } else if (type === 'medication') {
                showCreateMedicationModal();
            } else if (type === 'supplement') {
                showCreateSupplementModal();
            } else {
                Notification.info(`Funcionalidade de novo ${getTypeLabel(type)} em desenvolvimento`);
            }
        }
        
        // Mostrar modal de criar procedimento
        function showCreateProcedureModal() {
            const modalHtml = `
                <div id="createProcedureModal" class="modal-overlay" onclick="closeCreateProcedureModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h3><i class="fas fa-plus"></i> Novo Procedimento</h3>
                            <button class="modal-close" onclick="closeCreateProcedureModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <form id="createProcedureForm" onsubmit="submitCreateProcedure(event)">
                            <div class="modal-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Nome do Procedimento *</label>
                                        <input type="text" name="nome" class="form-input" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Preço (R$) *</label>
                                        <input type="number" name="preco" class="form-input" step="0.01" min="0" required>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Duração (minutos)</label>
                                        <input type="number" name="duracao_minutos" class="form-input" min="0">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Código</label>
                                        <input type="text" name="codigo" class="form-input">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Descrição</label>
                                    <textarea name="descricao" class="form-textarea" rows="3"></textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Materiais/Observações</label>
                                    <textarea name="observacoes" class="form-textarea" rows="2"></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" onclick="closeCreateProcedureModal()">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Salvar Procedimento
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        
        // Fechar modal de criar procedimento
        function closeCreateProcedureModal(event) {
            if (event && event.target !== event.currentTarget) return;
            
            const modal = document.getElementById('createProcedureModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Submeter formulário de criar procedimento
        async function submitCreateProcedure(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const procedureData = {
                nome: formData.get('nome'),
                descricao: formData.get('descricao'),
                categoria: 'procedimento',
                preco: parseFloat(formData.get('preco')),
                duracao_minutos: formData.get('duracao_minutos') ? parseInt(formData.get('duracao_minutos')) : null,
                codigo: formData.get('codigo') || null,
                observacoes: formData.get('observacoes') || null
            };
            
            try {
                const response = await fetch('/sistema/produtos/api', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(procedureData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Procedimento criado com sucesso!');
                    closeCreateProcedureModal();
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao criar procedimento');
                }
                
            } catch (error) {
                console.error('Erro ao criar procedimento:', error);
                Notification.error('Erro ao criar procedimento');
            }
        }

        // Editar produto
        function editProduct(type, id) {
            if (type === 'procedure') {
                showEditProcedureModal(id);
            } else if (type === 'medication') {
                showEditMedicationModal(id);
            } else if (type === 'supplement') {
                showEditSupplementModal(id);
            } else {
                Notification.info(`Funcionalidade de editar ${getTypeLabel(type)} em desenvolvimento`);
            }
        }

        // Excluir produto
        function deleteProduct(type, id) {
            if (type === 'procedure') {
                deleteProcedure(id);
            } else if (type === 'medication') {
                deleteMedication(id);
            } else if (type === 'supplement') {
                deleteSupplement(id);
            } else {
                Notification.info(`Funcionalidade de excluir ${getTypeLabel(type)} em desenvolvimento`);
            }
        }
        
        // Mostrar modal de editar procedimento
        function showEditProcedureModal(id) {
            const procedure = products.procedures.find(p => p.id === id);
            if (!procedure) {
                Notification.error('Procedimento não encontrado');
                return;
            }
            
            const modalHtml = `
                <div id="editProcedureModal" class="modal-overlay" onclick="closeEditProcedureModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h3><i class="fas fa-edit"></i> Editar Procedimento</h3>
                            <button class="modal-close" onclick="closeEditProcedureModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <form id="editProcedureForm" onsubmit="submitEditProcedure(event, ${id})">
                            <div class="modal-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Nome do Procedimento *</label>
                                        <input type="text" name="nome" class="form-input" value="${procedure.name}" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Preço (R$) *</label>
                                        <input type="number" name="preco" class="form-input" step="0.01" min="0" value="${procedure.price}" required>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Duração (minutos)</label>
                                        <input type="number" name="duracao_minutos" class="form-input" min="0" value="${procedure.duration || ''}">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Código</label>
                                        <input type="text" name="codigo" class="form-input" value="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Descrição</label>
                                    <textarea name="descricao" class="form-textarea" rows="3">${procedure.description || ''}</textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Materiais/Observações</label>
                                    <textarea name="observacoes" class="form-textarea" rows="2">${procedure.materials || ''}</textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" onclick="closeEditProcedureModal()">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Salvar Alterações
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        
        // Fechar modal de editar procedimento
        function closeEditProcedureModal(event) {
            if (event && event.target !== event.currentTarget) return;
            
            const modal = document.getElementById('editProcedureModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Submeter formulário de editar procedimento
        async function submitEditProcedure(event, id) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const procedureData = {
                nome: formData.get('nome'),
                descricao: formData.get('descricao'),
                categoria: 'procedimento',
                preco: parseFloat(formData.get('preco')),
                duracao_minutos: formData.get('duracao_minutos') ? parseInt(formData.get('duracao_minutos')) : null,
                codigo: formData.get('codigo') || null,
                observacoes: formData.get('observacoes') || null
            };
            
            try {
                const response = await fetch(`/sistema/produtos/api/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(procedureData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Procedimento atualizado com sucesso!');
                    closeEditProcedureModal();
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao atualizar procedimento');
                }
                
            } catch (error) {
                console.error('Erro ao atualizar procedimento:', error);
                Notification.error('Erro ao atualizar procedimento');
            }
        }
        
        // Excluir procedimento
        async function deleteProcedure(id) {
            const procedure = products.procedures.find(p => p.id === id);
            if (!procedure) {
                Notification.error('Procedimento não encontrado');
                return;
            }
            
            if (!confirm(`Tem certeza que deseja excluir o procedimento "${procedure.name}"?\n\nEsta ação não pode ser desfeita.`)) {
                return;
            }
            
            try {
                const response = await fetch(`/sistema/produtos/api/${id}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Procedimento excluído com sucesso!');
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao excluir procedimento');
                }
                
            } catch (error) {
                console.error('Erro ao excluir procedimento:', error);
                Notification.error('Erro ao excluir procedimento');
            }
         }

        // ===== FUNÇÕES PARA MEDICAMENTOS =====
        
        // Mostrar modal de criar medicamento
        function showCreateMedicationModal() {
            const modalHtml = `
                <div id="createMedicationModal" class="modal-overlay" onclick="closeCreateMedicationModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h3><i class="fas fa-plus"></i> Novo Medicamento</h3>
                            <button class="modal-close" onclick="closeCreateMedicationModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <form id="createMedicationForm" onsubmit="submitCreateMedication(event)">
                            <div class="modal-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Nome do Medicamento *</label>
                                        <input type="text" name="nome" class="form-input" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Preço (R$) *</label>
                                        <input type="number" name="preco" class="form-input" step="0.01" min="0" required>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Concentração</label>
                                        <input type="text" name="concentracao" class="form-input" placeholder="Ex: 500mg, 2%, 10ml">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Unidade/Volume</label>
                                        <input type="text" name="unidade_medida" class="form-input" placeholder="Ex: 30ml, 60 cápsulas">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Marca</label>
                                        <input type="text" name="marca" class="form-input">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Código</label>
                                        <input type="text" name="codigo" class="form-input">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Descrição</label>
                                    <textarea name="descricao" class="form-textarea" rows="3" placeholder="Descrição do medicamento, indicações..."></textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Modo de Uso/Observações</label>
                                    <textarea name="observacoes" class="form-textarea" rows="2" placeholder="Posologia, contraindicações, observações..."></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" onclick="closeCreateMedicationModal()">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Salvar Medicamento
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        
        // Fechar modal de criar medicamento
        function closeCreateMedicationModal(event) {
            if (event && event.target !== event.currentTarget) return;
            
            const modal = document.getElementById('createMedicationModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Submeter formulário de criar medicamento
        async function submitCreateMedication(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const medicationData = {
                nome: formData.get('nome'),
                descricao: formData.get('descricao'),
                categoria: 'medicamento',
                preco: parseFloat(formData.get('preco')),
                codigo: formData.get('codigo') || null,
                marca: formData.get('marca') || null,
                unidade_medida: formData.get('unidade_medida') || null,
                observacoes: formData.get('observacoes') || null
            };
            
            // Adicionar concentração na descrição se fornecida
            const concentracao = formData.get('concentracao');
            if (concentracao) {
                medicationData.descricao = (medicationData.descricao || '') + 
                    (medicationData.descricao ? '\n' : '') + 
                    `Concentração: ${concentracao}`;
            }
            
            try {
                const response = await fetch('/sistema/produtos/api', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(medicationData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Medicamento criado com sucesso!');
                    closeCreateMedicationModal();
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao criar medicamento');
                }
                
            } catch (error) {
                console.error('Erro ao criar medicamento:', error);
                Notification.error('Erro ao criar medicamento');
            }
        }
        
        // Mostrar modal de editar medicamento
        function showEditMedicationModal(id) {
            const medication = products.medications.find(p => p.id === id);
            if (!medication) {
                Notification.error('Medicamento não encontrado');
                return;
            }
            
            const modalHtml = `
                <div id="editMedicationModal" class="modal-overlay" onclick="closeEditMedicationModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h3><i class="fas fa-edit"></i> Editar Medicamento</h3>
                            <button class="modal-close" onclick="closeEditMedicationModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <form id="editMedicationForm" onsubmit="submitEditMedication(event, ${id})">
                            <div class="modal-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Nome do Medicamento *</label>
                                        <input type="text" name="nome" class="form-input" value="${medication.name}" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Preço (R$) *</label>
                                        <input type="number" name="preco" class="form-input" step="0.01" min="0" value="${medication.price}" required>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Concentração</label>
                                        <input type="text" name="concentracao" class="form-input" value="${medication.concentration || ''}" placeholder="Ex: 500mg, 2%, 10ml">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Unidade/Volume</label>
                                        <input type="text" name="unidade_medida" class="form-input" value="${medication.volume || ''}" placeholder="Ex: 30ml, 60 cápsulas">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Marca</label>
                                        <input type="text" name="marca" class="form-input" value="">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Código</label>
                                        <input type="text" name="codigo" class="form-input" value="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Descrição</label>
                                    <textarea name="descricao" class="form-textarea" rows="3">${medication.description || ''}</textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Modo de Uso/Observações</label>
                                    <textarea name="observacoes" class="form-textarea" rows="2">${medication.usage || ''}</textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" onclick="closeEditMedicationModal()">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Salvar Alterações
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        
        // Fechar modal de editar medicamento
        function closeEditMedicationModal(event) {
            if (event && event.target !== event.currentTarget) return;
            
            const modal = document.getElementById('editMedicationModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Submeter formulário de editar medicamento
        async function submitEditMedication(event, id) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const medicationData = {
                nome: formData.get('nome'),
                descricao: formData.get('descricao'),
                categoria: 'medicamento',
                preco: parseFloat(formData.get('preco')),
                codigo: formData.get('codigo') || null,
                marca: formData.get('marca') || null,
                unidade_medida: formData.get('unidade_medida') || null,
                observacoes: formData.get('observacoes') || null
            };
            
            // Adicionar concentração na descrição se fornecida
            const concentracao = formData.get('concentracao');
            if (concentracao) {
                medicationData.descricao = (medicationData.descricao || '') + 
                    (medicationData.descricao ? '\n' : '') + 
                    `Concentração: ${concentracao}`;
            }
            
            try {
                const response = await fetch(`/sistema/produtos/api/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(medicationData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Medicamento atualizado com sucesso!');
                    closeEditMedicationModal();
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao atualizar medicamento');
                }
                
            } catch (error) {
                console.error('Erro ao atualizar medicamento:', error);
                Notification.error('Erro ao atualizar medicamento');
            }
        }
        
        // Excluir medicamento
        async function deleteMedication(id) {
            const medication = products.medications.find(p => p.id === id);
            if (!medication) {
                Notification.error('Medicamento não encontrado');
                return;
            }
            
            if (!confirm(`Tem certeza que deseja excluir o medicamento "${medication.name}"?\n\nEsta ação não pode ser desfeita.`)) {
                return;
            }
            
            try {
                const response = await fetch(`/sistema/produtos/api/${id}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Medicamento excluído com sucesso!');
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao excluir medicamento');
                }
                
            } catch (error) {
                console.error('Erro ao excluir medicamento:', error);
                Notification.error('Erro ao excluir medicamento');
            }
        }

        // ===== FUNÇÕES PARA SUPLEMENTOS =====
        
        // Mostrar modal de criar suplemento
        function showCreateSupplementModal() {
            const modalHtml = `
                <div id="createSupplementModal" class="modal-overlay" onclick="closeCreateSupplementModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h3><i class="fas fa-plus"></i> Novo Suplemento</h3>
                            <button class="modal-close" onclick="closeCreateSupplementModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <form id="createSupplementForm" onsubmit="submitCreateSupplement(event)">
                            <div class="modal-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Nome do Suplemento *</label>
                                        <input type="text" name="nome" class="form-input" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Preço (R$) *</label>
                                        <input type="number" name="preco" class="form-input" step="0.01" min="0" required>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Forma</label>
                                        <select name="forma" class="form-select">
                                            <option value="">Selecione...</option>
                                            <option value="Cápsula">Cápsula</option>
                                            <option value="Comprimido">Comprimido</option>
                                            <option value="Pó">Pó</option>
                                            <option value="Líquido">Líquido</option>
                                            <option value="Goma">Goma</option>
                                            <option value="Sachê">Sachê</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Dosagem</label>
                                        <input type="text" name="dosagem" class="form-input" placeholder="Ex: 500mg, 10g, 1 colher">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Marca</label>
                                        <input type="text" name="marca" class="form-input">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Código</label>
                                        <input type="text" name="codigo" class="form-input">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Descrição</label>
                                    <textarea name="descricao" class="form-textarea" rows="3" placeholder="Descrição do suplemento, composição..."></textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Modo de Uso/Observações</label>
                                    <textarea name="observacoes" class="form-textarea" rows="2" placeholder="Como tomar, horários, observações..."></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" onclick="closeCreateSupplementModal()">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Salvar Suplemento
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        
        // Fechar modal de criar suplemento
        function closeCreateSupplementModal(event) {
            if (event && event.target !== event.currentTarget) return;
            
            const modal = document.getElementById('createSupplementModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Submeter formulário de criar suplemento
        async function submitCreateSupplement(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const supplementData = {
                nome: formData.get('nome'),
                descricao: formData.get('descricao'),
                categoria: 'suplemento',
                preco: parseFloat(formData.get('preco')),
                codigo: formData.get('codigo') || null,
                marca: formData.get('marca') || null,
                unidade_medida: formData.get('forma') || null,
                observacoes: formData.get('observacoes') || null
            };
            
            // Adicionar dosagem na descrição se fornecida
            const dosagem = formData.get('dosagem');
            if (dosagem) {
                supplementData.descricao = (supplementData.descricao || '') + 
                    (supplementData.descricao ? '\n' : '') + 
                    `Dosagem: ${dosagem}`;
            }
            
            try {
                const response = await fetch('/sistema/produtos/api', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(supplementData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Suplemento criado com sucesso!');
                    closeCreateSupplementModal();
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao criar suplemento');
                }
                
            } catch (error) {
                console.error('Erro ao criar suplemento:', error);
                Notification.error('Erro ao criar suplemento');
            }
        }
        
        // Mostrar modal de editar suplemento
        function showEditSupplementModal(id) {
            const supplement = products.supplements.find(p => p.id === id);
            if (!supplement) {
                Notification.error('Suplemento não encontrado');
                return;
            }
            
            const modalHtml = `
                <div id="editSupplementModal" class="modal-overlay" onclick="closeEditSupplementModal(event)">
                    <div class="modal-content" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h3><i class="fas fa-edit"></i> Editar Suplemento</h3>
                            <button class="modal-close" onclick="closeEditSupplementModal()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <form id="editSupplementForm" onsubmit="submitEditSupplement(event, ${id})">
                            <div class="modal-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Nome do Suplemento *</label>
                                        <input type="text" name="nome" class="form-input" value="${supplement.name}" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Preço (R$) *</label>
                                        <input type="number" name="preco" class="form-input" step="0.01" min="0" value="${supplement.price}" required>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Forma</label>
                                        <select name="forma" class="form-select">
                                            <option value="">Selecione...</option>
                                            <option value="Cápsula" ${supplement.form === 'Cápsula' ? 'selected' : ''}>Cápsula</option>
                                            <option value="Comprimido" ${supplement.form === 'Comprimido' ? 'selected' : ''}>Comprimido</option>
                                            <option value="Pó" ${supplement.form === 'Pó' ? 'selected' : ''}>Pó</option>
                                            <option value="Líquido" ${supplement.form === 'Líquido' ? 'selected' : ''}>Líquido</option>
                                            <option value="Goma" ${supplement.form === 'Goma' ? 'selected' : ''}>Goma</option>
                                            <option value="Sachê" ${supplement.form === 'Sachê' ? 'selected' : ''}>Sachê</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Dosagem</label>
                                        <input type="text" name="dosagem" class="form-input" value="${supplement.dosage || ''}" placeholder="Ex: 500mg, 10g, 1 colher">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Marca</label>
                                        <input type="text" name="marca" class="form-input" value="">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Código</label>
                                        <input type="text" name="codigo" class="form-input" value="">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Descrição</label>
                                    <textarea name="descricao" class="form-textarea" rows="3">${supplement.description || ''}</textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Modo de Uso/Observações</label>
                                    <textarea name="observacoes" class="form-textarea" rows="2">${supplement.usage || ''}</textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" onclick="closeEditSupplementModal()">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Salvar Alterações
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        
        // Fechar modal de editar suplemento
        function closeEditSupplementModal(event) {
            if (event && event.target !== event.currentTarget) return;
            
            const modal = document.getElementById('editSupplementModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Submeter formulário de editar suplemento
        async function submitEditSupplement(event, id) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            const supplementData = {
                nome: formData.get('nome'),
                descricao: formData.get('descricao'),
                categoria: 'suplemento',
                preco: parseFloat(formData.get('preco')),
                codigo: formData.get('codigo') || null,
                marca: formData.get('marca') || null,
                unidade_medida: formData.get('forma') || null,
                observacoes: formData.get('observacoes') || null
            };
            
            // Adicionar dosagem na descrição se fornecida
            const dosagem = formData.get('dosagem');
            if (dosagem) {
                supplementData.descricao = (supplementData.descricao || '') + 
                    (supplementData.descricao ? '\n' : '') + 
                    `Dosagem: ${dosagem}`;
            }
            
            try {
                const response = await fetch(`/sistema/produtos/api/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(supplementData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Suplemento atualizado com sucesso!');
                    closeEditSupplementModal();
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao atualizar suplemento');
                }
                
            } catch (error) {
                console.error('Erro ao atualizar suplemento:', error);
                Notification.error('Erro ao atualizar suplemento');
            }
        }
        
        // Excluir suplemento
        async function deleteSupplement(id) {
            const supplement = products.supplements.find(p => p.id === id);
            if (!supplement) {
                Notification.error('Suplemento não encontrado');
                return;
            }
            
            if (!confirm(`Tem certeza que deseja excluir o suplemento "${supplement.name}"?\n\nEsta ação não pode ser desfeita.`)) {
                return;
            }
            
            try {
                const response = await fetch(`/sistema/produtos/api/${id}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Notification.success('Suplemento excluído com sucesso!');
                    loadProducts(); // Recarregar produtos
                } else {
                    Notification.error(result.message || 'Erro ao excluir suplemento');
                }
                
            } catch (error) {
                console.error('Erro ao excluir suplemento:', error);
                Notification.error('Erro ao excluir suplemento');
            }
        }

        // Funções auxiliares
        function formatCurrency(value) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            }).format(value);
        }

        function getTypeLabel(type) {
            const labels = {
                'procedure': 'procedimento',
                'medication': 'medicamento',
                'supplement': 'suplemento'
            };
            return labels[type] || type;
        }
    </script>

<style>
/* Estilos específicos para o conteúdo da página de produtos */
.header {
    margin-bottom: 30px;
}

.page-title {
    font-size: 28px;
    font-weight: 700;
    color: #1e293b;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.page-title i {
    color: #2563eb;
}

/* Estilos das Abas */
.products-tabs {
    margin-bottom: 30px;
}

.tab-buttons {
    display: flex;
    gap: 10px;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 0;
}

.tab-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    background: white;
    border: 1px solid #e5e7eb;
    border-bottom: none;
    border-radius: 8px 8px 0 0;
    cursor: pointer;
    transition: all 0.3s ease;
    color: #6b7280;
    font-weight: 500;
}

.tab-btn:hover {
    background: #f9fafb;
    color: #374151;
}

.tab-btn.active {
    background: #2563eb;
    color: white;
    border-color: #2563eb;
    transform: translateY(2px);
}

/* Estilos dos Filtros */
.filter-section {
    background: white;
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 30px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
}

.filter-row {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr auto;
    gap: 20px;
    align-items: end;
}

.form-group {
    display: flex;
    flex-direction: column;
}

.form-label {
    font-size: 14px;
    font-weight: 500;
    color: #374151;
    margin-bottom: 6px;
}

.form-input,
.form-select {
    padding: 10px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}

.form-input:focus,
.form-select:focus {
    outline: none;
    border-color: #2563eb;
    box-shadow: 0 0 0 1px #2563eb;
}

.btn {
    padding: 10px 16px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 6px;
}

.btn-secondary {
    background: #6b7280;
    color: white;
}

.btn-secondary:hover {
    background: #4b5563;
}

/* Estilos do Conteúdo das Abas */
.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.products-container {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
}

.new-product-btn {
    background: #10b981;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.new-product-btn:hover {
    background: #059669;
    transform: translateY(-1px);
}

/* Estilos dos Cards de Produtos */
.product-card {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
    transition: all 0.3s ease;
}

.product-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.product-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 15px;
}

.product-title {
    font-size: 18px;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 4px;
}

.product-category {
    font-size: 14px;
    color: #6b7280;
    background: #f3f4f6;
    padding: 4px 8px;
    border-radius: 4px;
    display: inline-block;
}

.product-price {
    font-size: 20px;
    font-weight: 700;
    color: #059669;
}

.product-content {
    margin-bottom: 20px;
}

.product-details {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 15px;
}

.detail-item {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 14px;
}

.detail-item i {
    color: #6b7280;
    width: 16px;
}

.detail-label {
    font-weight: 500;
    color: #374151;
}

.detail-value {
    color: #6b7280;
}

.product-description {
    font-size: 14px;
    line-height: 1.6;
    color: #4b5563;
}

.product-description p {
    margin-bottom: 8px;
}

.product-actions {
    display: flex;
    gap: 10px;
}

.product-btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 6px;
}

.product-btn.edit {
    background: #3b82f6;
    color: white;
}

.product-btn.edit:hover {
    background: #2563eb;
}

.product-btn.delete {
    background: #ef4444;
    color: white;
}

.product-btn.delete:hover {
    background: #dc2626;
}

/* Estado Vazio */
.empty-state {
    text-align: center;
    padding: 60px 20px;
    color: #6b7280;
}

.empty-state i {
    font-size: 48px;
    margin-bottom: 20px;
    color: #d1d5db;
}

.empty-state h4 {
    font-size: 18px;
    margin-bottom: 8px;
    color: #374151;
}



/* Estilos do Modal */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 20px;
}

.modal-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    max-width: 600px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 25px;
    border-bottom: 1px solid #e5e7eb;
}

.modal-header h3 {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
    color: #1e293b;
    display: flex;
    align-items: center;
    gap: 8px;
}

.modal-close {
    background: none;
    border: none;
    font-size: 18px;
    color: #6b7280;
    cursor: pointer;
    padding: 5px;
    border-radius: 4px;
    transition: all 0.3s ease;
}

.modal-close:hover {
    background: #f3f4f6;
    color: #374151;
}

.modal-body {
    padding: 25px;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    padding: 20px 25px;
    border-top: 1px solid #e5e7eb;
    background: #f9fafb;
    border-radius: 0 0 12px 12px;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
}

.form-textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    font-family: inherit;
    resize: vertical;
    transition: border-color 0.3s ease;
}

.form-textarea:focus {
    outline: none;
    border-color: #2563eb;
    box-shadow: 0 0 0 1px #2563eb;
}

.btn-primary {
    background: #2563eb;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 6px;
}

.btn-primary:hover {
    background: #1d4ed8;
}

/* Responsividade para conteúdo */
@media (max-width: 768px) {
    .filter-row {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .tab-buttons {
        flex-wrap: wrap;
    }
    
    .product-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }
    
    .product-details {
        flex-direction: column;
        gap: 10px;
    }
    
    .product-actions {
        flex-direction: column;
    }
    
    .form-row {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .modal-content {
        margin: 10px;
        max-height: 95vh;
    }
    
    .modal-header,
    .modal-body,
    .modal-footer {
        padding: 15px 20px;
    }
}
</style>

<script src="/js/menuMobile.js"></script>
