

<link rel="stylesheet" href="/css/agenda.css">

<!-- Mobile Menu Button -->
<button class="mobile-menu-btn" onclick="toggleMobileMenu()">
    <i class="fas fa-bars"></i>
</button>

<!-- Sidebar Overlay -->
<div class="sidebar-overlay" onclick="closeMobileMenu()"></div>

<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <h2><i class="fas fa-spa"></i> Bella Estética</h2>
        </div>

        <ul class="nav-menu">
            <li class="nav-item"><a href="/sistema/dashboard" class="nav-link"><i class="fas fa-home"></i>Inicio</a></li>
            <li class="nav-item"><a href="/sistema/agenda" class="nav-link active"><i class="fas fa-calendar-alt"></i>Agenda</a></li>
            <li class="nav-item"><a href="/sistema/pacientes" class="nav-link"><i class="fas fa-users"></i>Pacientes</a></li>
            <li class="nav-item"><a href="/sistema/atendimento" class="nav-link"><i class="fas fa-user-md"></i>Atendimentos</a></li>
            <li class="nav-item"><a href="/sistema/financeiro" class="nav-link"><i class="fas fa-dollar-sign"></i>Financeiro</a></li>
            <li class="nav-item"><a href="/sistema/produtos" class="nav-link"><i class="fas fa-box"></i>Produtos</a></li>
            <li class="nav-item"><a href="/sistema/minhaClinica" class="nav-link"><i class="fas fa-clinic-medical"></i>Minha Clínica</a></li>
        </ul>

        <!-- User Section -->
        <div class="sidebar-user">
            <div class="user-profile">
                <div><i class="fa-solid fa-user"></i></div>
                <div class="user-details">
                    <div class="user-name-sidebar">{{user.nome}}</div>
                    <div class="user-role">{{user.tipo_usuario}}</div>
                </div>
            </div>
            <a href="/sistema/logout" class="logout-btn">
                <i class="fas fa-sign-out-alt"></i>
                Sair
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content agenda-container">
        <!-- Header -->
        <div class="agenda-header">
            <h1 class="agenda-title">
                <i class="fas fa-calendar-alt"></i>
                Agenda de Atendimentos
            </h1>
            <button class="btn btn-primary" onclick="abrirModalAgendamento()">
                <i class="fas fa-plus"></i>
                Novo Agendamento
            </button>
        </div>

        <!-- Filtros -->
        <div class="filters-section">
            <div class="filters-row">
                <div class="form-group">
                    <label class="form-label">Buscar por Nome ou CPF</label>
                    <input type="text" id="buscaInput" class="form-input" placeholder="Digite o nome ou CPF do paciente...">
                </div>
                <div class="form-group">
                    <label class="form-label">Mês</label>
                    <select id="mesSelect" class="form-select">
                        <option value="">Todos</option>
                        <option value="1">Janeiro</option>
                        <option value="2">Fevereiro</option>
                        <option value="3">Março</option>
                        <option value="4">Abril</option>
                        <option value="5">Maio</option>
                        <option value="6">Junho</option>
                        <option value="7">Julho</option>
                        <option value="8">Agosto</option>
                        <option value="9">Setembro</option>
                        <option value="10">Outubro</option>
                        <option value="11">Novembro</option>
                        <option value="12">Dezembro</option>
                    </select>
                </div>
                <div class="form-group">
                     <label class="form-label">Ano</label>
                     <select id="anoSelect" class="form-select">
                         <option value="">Todos</option>
                         <option value="2024">2024</option>
                         <option value="2025">2025</option>
                         <option value="2026">2026</option>
                     </select>
                 </div>
                <div class="form-group">
                    <button class="btn btn-primary" onclick="buscarAgendamentos()">
                        <i class="fas fa-search"></i>
                        Buscar
                    </button>
                </div>
                <div class="form-group">
                    <button class="btn btn-secondary" onclick="limparFiltros()">
                        <i class="fas fa-refresh"></i>
                        Limpar
                    </button>
                </div>
            </div>
        </div>

        <!-- Tabela de Agendamentos -->
        <div class="table-container">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-list"></i>
                    Lista de Agendamentos
                </h3>
                <span id="totalRegistros" class="text-muted">Total: 0 agendamentos</span>
            </div>

            <div id="loadingContainer" class="loading" style="display: none;">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Carregando agendamentos...</p>
            </div>

            <div id="emptyContainer" class="empty-state" style="display: none;">
                <i class="fas fa-calendar-times"></i>
                <h3>Nenhum agendamento encontrado</h3>
                <p>Não há agendamentos para os filtros selecionados.</p>
            </div>

            <div id="tableContainer" style="display: none;">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Data/Hora</th>
                            <th>Paciente</th>
                            <th>CPF</th>
                            <th>Profissional</th>
                            <th>Procedimento</th>
                            <th>Valor</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="agendamentosTableBody">
                        <!-- Dados carregados via JavaScript -->
                    </tbody>
                </table>
            </div>

            <div id="paginationContainer" class="pagination" style="display: none;">
                <!-- Paginação carregada via JavaScript -->
            </div>
        </div>
    </div>
</div>

<!-- Modal Agendamento -->
<div id="modalAgendamento" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; justify-content: center; align-items: center;">
    <div style="background: white; border-radius: 8px; width: 90%; max-width: 700px; max-height: 90vh; overflow: hidden; display: flex; flex-direction: column;">
        <div style="flex: 1; overflow-y: auto; padding: 0;">
        <div style="padding: 20px; border-bottom: 1px solid #e2e8f0; display: flex; justify-content: space-between; align-items: center;">
            <h3 id="modalTitle" style="margin: 0; font-size: 18px; font-weight: 600; color: #1e293b;">Novo Agendamento</h3>
            <button onclick="fecharModal()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">&times;</button>
        </div>

        <form id="formAgendamento" onsubmit="salvarAgendamento(event)">
            <div style="padding: 20px;">
                <!-- Busca de Paciente -->
                <div style="margin-bottom: 15px;">
                    <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 14px;">Buscar Paciente</label>
                    <div style="display: flex; gap: 10px;">
                        <input type="text" id="buscaPaciente" placeholder="Digite nome ou CPF..." style="flex: 1; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;">
                        <button type="button" onclick="buscarPacientes()" style="padding: 10px 16px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer;">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>

                <!-- Info do Paciente -->
                <div id="infoPacienteDiv" style="display: none; margin-bottom: 15px; padding: 12px; background: #eff6ff; border: 1px solid #bfdbfe; border-radius: 6px; color: #1e40af;">
                    <div id="infoPaciente"></div>
                    <input type="hidden" id="pacienteId">
                </div>

                <!-- Profissional -->
                 <div style="margin-bottom: 15px;">
                     <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 14px;">Profissional *</label>
                     <select id="profissionalSelect" required style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;">
                         <option value="">Selecione um profissional</option>
                     </select>
                 </div>

                 <!-- Tipo de Agendamento -->
                 <div style="margin-bottom: 15px;">
                     <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 14px;">Tipo de Agendamento</label>
                     <select id="tipoAgendamento" onchange="alterarTipoAgendamento()" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;">
                         <option value="analise">Apenas Análise/Consulta</option>
                         <option value="procedimentos">Com Procedimentos/Produtos</option>
                     </select>
                 </div>

                 <!-- Seção de Itens (Procedimentos e Produtos) -->
                 <div id="secaoItens" style="display: none; margin-bottom: 15px;">
                     <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                         <label style="font-weight: 500; color: #374151; font-size: 14px;">Procedimentos e Produtos</label>
                         <button type="button" onclick="adicionarItem()" style="padding: 5px 10px; background: #10b981; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                             <i class="fas fa-plus"></i> Adicionar
                         </button>
                     </div>
                     <div id="listaItens" style="border: 1px solid #e5e7eb; border-radius: 6px; padding: 10px; background: #f9fafb;">
                         <!-- Itens serão adicionados aqui dinamicamente -->
                     </div>
                 </div>

                <!-- Data e Horário -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                    <div>
                        <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 14px;">Data *</label>
                        <input type="date" id="dataAgendamento" required style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;">
                    </div>
                    <div>
                        <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 14px;">Horário *</label>
                        <input type="time" id="horarioAgendamento" required style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px;">
                    </div>
                </div>

                <!-- Valor Total (calculado automaticamente) -->
                 <div id="resumoValores" style="display: none; margin-bottom: 15px; padding: 12px; background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 6px;">
                     <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                         <span style="font-weight: 500; color: #374151;">Subtotal:</span>
                         <span id="subtotalAgendamento" style="color: #374151;">R$ 0,00</span>
                     </div>
                     <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                         <span style="font-weight: 500; color: #374151;">Desconto Total:</span>
                         <span id="descontoTotalAgendamento" style="color: #ef4444;">R$ 0,00</span>
                     </div>
                     <div style="display: flex; justify-content: space-between; border-top: 1px solid #bae6fd; padding-top: 5px;">
                         <span style="font-weight: 600; color: #1e293b;">Total:</span>
                         <span id="totalAgendamento" style="font-weight: 600; color: #1e293b;">R$ 0,00</span>
                     </div>
                 </div>

                <!-- Observações -->
                <div style="margin-bottom: 15px;">
                    <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 14px;">Observações</label>
                    <textarea id="observacoesAgendamento" rows="3" placeholder="Observações sobre o agendamento..." style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 14px; resize: vertical;"></textarea>
                </div>
            </div>

        </div>
        <div style="padding: 20px; border-top: 1px solid #e2e8f0; display: flex; gap: 10px; justify-content: flex-end; background: white;">
            <button type="button" onclick="fecharModal()" style="padding: 10px 16px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer;">Cancelar</button>
            <button type="submit" style="padding: 10px 16px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">
                <i class="fas fa-save"></i> Salvar
            </button>
        </div>
        </form>
    </div>
</div>

<script src="/js/menuMobile.js"></script>
<script>
// Variáveis globais
let paginaAtual = 1;
let totalPaginas = 1;

// Inicializar página
document.addEventListener('DOMContentLoaded', function() {
    inicializarFiltros();
    carregarProfissionais();
    carregarTodosProdutos();
    buscarAgendamentos();
});

// Remarcar agendamento (apenas data e hora)
function remarcarAgendamento(id) {
    fetch(`/sistema/agendamentos/${id}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const agendamento = data.data;
                
                // Obter data e hora atuais
                const dataAtual = new Date(agendamento.data_agendamento);
                const dataFormatada = dataAtual.toISOString().split('T')[0];
                const horaFormatada = dataAtual.toTimeString().slice(0, 5);
                
                // Solicitar nova data
                const novaData = prompt(`📅 REMARCAR AGENDAMENTO\n\nPaciente: ${agendamento.paciente?.nome}\nData atual: ${dataFormatada}\n\nDigite a nova data (AAAA-MM-DD):`, dataFormatada);
                
                if (!novaData) return;
                
                // Solicitar nova hora
                const novaHora = prompt(`🕐 NOVA HORA\n\nData: ${novaData}\nHora atual: ${horaFormatada}\n\nDigite a nova hora (HH:MM):`, horaFormatada);
                
                if (!novaHora) return;
                
                // Validar formato
                if (!/^\d{4}-\d{2}-\d{2}$/.test(novaData)) {
                    alert('❌ Formato de data inválido! Use AAAA-MM-DD');
                    return;
                }
                
                if (!/^\d{2}:\d{2}$/.test(novaHora)) {
                    alert('❌ Formato de hora inválido! Use HH:MM');
                    return;
                }
                
                const novaDataHora = `${novaData} ${novaHora}:00`;
                
                // Confirmar alteração
                const confirmacao = confirm(`✅ CONFIRMAR REMARCAÇÃO\n\nDe: ${dataFormatada} ${horaFormatada}\nPara: ${novaData} ${novaHora}\n\nConfirmar alteração?`);
                
                if (!confirmacao) return;
                
                // Atualizar no backend
                fetch(`/sistema/agendamentos/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        data_agendamento: novaDataHora,
                        profissional_id: agendamento.profissional_id
                    })
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        alert('✅ Agendamento remarcado com sucesso!');
                        buscarAgendamentos();
                    } else {
                        alert('❌ ' + result.message);
                    }
                })
                .catch(error => {
                    console.error('Erro:', error);
                    alert('❌ Erro ao remarcar agendamento');
                });
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('❌ Erro ao carregar agendamento');
        });
}

// Inicializar filtros com data atual
 function inicializarFiltros() {
     let mesDoAno = new Date().getMonth() + 1;
     let anoEmQueEstamos = new Date().getFullYear();
     document.getElementById('mesSelect').value = mesDoAno;
     document.getElementById('anoSelect').value = anoEmQueEstamos ;
 }

// Buscar agendamentos
function buscarAgendamentos(pagina = 1) {
    const busca = document.getElementById('buscaInput').value;
    const mes = document.getElementById('mesSelect').value;
    const ano = document.getElementById('anoSelect').value;
    
    const params = new URLSearchParams({
        page: pagina,
        limit: 10
    });
    
    if (busca) params.append('busca', busca);
    if (mes) params.append('mes', mes);
    if (ano) params.append('ano', ano);
    
    mostrarLoading();
    
    fetch(`/sistema/agendamentos?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                exibirAgendamentos(data.data);
                atualizarPaginacao(data.pagination);
                document.getElementById('totalRegistros').textContent = `Total: ${data.pagination.totalRecords} agendamentos`;
            } else {
                mostrarErro('Erro ao carregar agendamentos');
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            mostrarErro('Erro ao carregar agendamentos');
        })
        .finally(() => {
            ocultarLoading();
        });
}

// Exibir agendamentos na tabela
function exibirAgendamentos(agendamentos) {
    const tbody = document.getElementById('agendamentosTableBody');
    
    if (agendamentos.length === 0) {
        mostrarVazio();
        return;
    }
    
    tbody.innerHTML = agendamentos.map(agendamento => {
        const dataFormatada = new Date(agendamento.data_agendamento).toLocaleString('pt-BR');
        const valor = agendamento.valor_final ? `R$ ${parseFloat(agendamento.valor_final).toFixed(2).replace('.', ',')}` : '-';
        
        // Exibir itens do agendamento
        let itensTexto = '-';
        if (agendamento.itens && agendamento.itens.length > 0) {
            itensTexto = agendamento.itens.map(item => {
                const qtd = item.quantidade > 1 ? ` (${item.quantidade}x)` : '';
                return `${item.produto.nome}${qtd}`;
            }).join(', ');
        } else if (agendamento.produto?.nome) {
            itensTexto = agendamento.produto.nome;
        }
        
        return `
            <tr>
                <td>${dataFormatada}</td>
                <td>${agendamento.paciente?.nome || '-'}</td>
                <td>${agendamento.paciente?.cpf || '-'}</td>
                <td>${agendamento.profissional?.nome || '-'}</td>
                <td title="${itensTexto}">${itensTexto.length > 50 ? itensTexto.substring(0, 50) + '...' : itensTexto}</td>
                <td>${valor}</td>
                <td><span class="status-badge status-${agendamento.status}">${agendamento.status}</span></td>
                <td>
                    <div class="actions-group">
                        <button class="btn btn-sm btn-info" data-id="${agendamento.id}" data-action="remarcar" title="Remarcar Data/Hora">
                            <i class="fas fa-calendar-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-primary" data-id="${agendamento.id}" data-action="editar" title="Editar Produtos/Procedimentos">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" data-id="${agendamento.id}" data-action="excluir" title="Excluir Agendamento">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    mostrarTabela();
}

// Controles de exibição
function mostrarLoading() {
    document.getElementById('loadingContainer').style.display = 'block';
    document.getElementById('tableContainer').style.display = 'none';
    document.getElementById('emptyContainer').style.display = 'none';
    document.getElementById('paginationContainer').style.display = 'none';
}

function ocultarLoading() {
    document.getElementById('loadingContainer').style.display = 'none';
}

function mostrarTabela() {
    document.getElementById('tableContainer').style.display = 'block';
    document.getElementById('emptyContainer').style.display = 'none';
    document.getElementById('paginationContainer').style.display = 'flex';
}

function mostrarVazio() {
    document.getElementById('tableContainer').style.display = 'none';
    document.getElementById('emptyContainer').style.display = 'block';
    document.getElementById('paginationContainer').style.display = 'none';
}

function mostrarErro(mensagem) {
    alert('❌ ' + mensagem);
    mostrarVazio();
}

// Paginação
function atualizarPaginacao(pagination) {
    const container = document.getElementById('paginationContainer');
    paginaAtual = pagination.currentPage;
    totalPaginas = pagination.totalPages;
    
    if (totalPaginas <= 1) {
        container.style.display = 'none';
        return;
    }
    
    let html = '';
    
    // Botão anterior
    html += `<button ${!pagination.hasPrev ? 'disabled' : ''} onclick="buscarAgendamentos(${paginaAtual - 1})">
        <i class="fas fa-chevron-left"></i>
    </button>`;
    
    // Páginas
    for (let i = 1; i <= totalPaginas; i++) {
        if (i === paginaAtual || i === 1 || i === totalPaginas || (i >= paginaAtual - 1 && i <= paginaAtual + 1)) {
            html += `<button class="${i === paginaAtual ? 'active' : ''}" onclick="buscarAgendamentos(${i})">${i}</button>`;
        } else if (i === paginaAtual - 2 || i === paginaAtual + 2) {
            html += '<span>...</span>';
        }
    }
    
    // Botão próximo
    html += `<button ${!pagination.hasNext ? 'disabled' : ''} onclick="buscarAgendamentos(${paginaAtual + 1})">
        <i class="fas fa-chevron-right"></i>
    </button>`;
    
    container.innerHTML = html;
}

// Limpar filtros
function limparFiltros() {
    document.getElementById('buscaInput').value = '';
    document.getElementById('mesSelect').value = '';
    document.getElementById('anoSelect').value = '';
    buscarAgendamentos();
}

// Variáveis globais
let agendamentoEditando = null;
let itensAgendamento = [];
let contadorItens = 0;
let todosProdutos = [];

// Abrir modal
function abrirModalAgendamento() {
    document.getElementById('modalAgendamento').style.display = 'flex';
}

// Fechar modal
function fecharModal() {
    document.getElementById('modalAgendamento').style.display = 'none';
    document.getElementById('formAgendamento').reset();
    document.getElementById('infoPacienteDiv').style.display = 'none';
    document.getElementById('pacienteId').value = '';
    agendamentoEditando = null;
    itensAgendamento = [];
    contadorItens = 0;
    document.getElementById('modalTitle').textContent = 'Novo Agendamento';
    document.getElementById('tipoAgendamento').value = 'analise';
    document.getElementById('secaoItens').style.display = 'none';
    document.getElementById('resumoValores').style.display = 'none';
    document.getElementById('listaItens').innerHTML = '';
    
    // Reabilitar campos que podem ter sido desabilitados
    document.getElementById('buscaPaciente').disabled = false;
    document.getElementById('profissionalSelect').disabled = false;
    document.getElementById('dataAgendamento').disabled = false;
    document.getElementById('horarioAgendamento').disabled = false;
}

// Alterar tipo de agendamento
function alterarTipoAgendamento() {
    const tipo = document.getElementById('tipoAgendamento').value;
    const secaoItens = document.getElementById('secaoItens');
    const resumoValores = document.getElementById('resumoValores');
    
    if (tipo === 'procedimentos') {
        secaoItens.style.display = 'block';
        resumoValores.style.display = 'block';
        if (itensAgendamento.length === 0) {
            adicionarItem();
        }
    } else {
        secaoItens.style.display = 'none';
        resumoValores.style.display = 'none';
        itensAgendamento = [];
        document.getElementById('listaItens').innerHTML = '';
    }
    calcularTotais();
}

// Adicionar item
function adicionarItem() {
    contadorItens++;
    const itemId = `item_${contadorItens}`;
    
    const itemHtml = `
        <div id="${itemId}" style="border: 1px solid #d1d5db; border-radius: 6px; padding: 10px; margin-bottom: 10px; background: white;">
            <div style="display: grid; grid-template-columns: 2fr 80px 100px 100px 40px; gap: 10px; align-items: end;">
                <div>
                    <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 12px;">Produto/Procedimento</label>
                    <select onchange="atualizarPrecoItem('${itemId}')" style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 4px; font-size: 12px;">
                        <option value="">Selecione...</option>
                    </select>
                </div>
                <div>
                    <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 12px;">Qtd</label>
                    <input type="number" value="1" min="1" onchange="calcularTotais()" style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 4px; font-size: 12px;">
                </div>
                <div>
                    <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 12px;">Valor Un.</label>
                    <input type="number" step="0.01" min="0" onchange="calcularTotais()" style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 4px; font-size: 12px;">
                </div>
                <div>
                    <label style="display: block; font-weight: 500; color: #374151; margin-bottom: 5px; font-size: 12px;">Desconto</label>
                    <input type="number" step="0.01" min="0" value="0" onchange="calcularTotais()" style="width: 100%; padding: 8px; border: 1px solid #d1d5db; border-radius: 4px; font-size: 12px;">
                </div>
                <div>
                    <button type="button" onclick="removerItem('${itemId}')" style="padding: 8px; background: #ef4444; color: white; border: none; border-radius: 4px; cursor: pointer;" title="Remover">
                        <i class="fas fa-trash" style="font-size: 10px;"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.getElementById('listaItens').insertAdjacentHTML('beforeend', itemHtml);
    carregarProdutosNoItem(itemId);
    calcularTotais(); // Recalcular totais após adicionar item
}

// Remover item
function removerItem(itemId) {
    document.getElementById(itemId).remove();
    calcularTotais();
}

// Atualizar preço do item
function atualizarPrecoItem(itemId) {
    const item = document.getElementById(itemId);
    const select = item.querySelector('select');
    const inputs = item.querySelectorAll('input[type="number"]');
    const inputValor = inputs[1]; // Segundo input é o valor unitário
    
    const produtoId = select.value;
    console.log('Produto selecionado:', produtoId);
    console.log('Produtos disponíveis:', todosProdutos.length);
    
    if (produtoId) {
        const produto = todosProdutos.find(p => p.id == produtoId);
        console.log('Produto encontrado:', produto);
        
        if (produto && produto.preco) {
            const preco = parseFloat(produto.preco).toFixed(2);
            console.log('Preço a ser definido:', preco);
            inputValor.value = preco;
            calcularTotais();
        } else {
            console.log('Produto sem preço ou não encontrado');
            inputValor.value = '0.00';
        }
    } else {
        inputValor.value = '';
        calcularTotais();
    }
}

// Calcular totais
function calcularTotais() {
    let subtotal = 0;
    let descontoTotal = 0;
    
    const itens = document.querySelectorAll('#listaItens > div');
    console.log('Calculando totais para', itens.length, 'itens');
    
    itens.forEach((item, index) => {
        const inputs = item.querySelectorAll('input[type="number"]');
        const quantidade = parseFloat(inputs[0]?.value) || 0;
        const valorUnitario = parseFloat(inputs[1]?.value) || 0;
        const desconto = parseFloat(inputs[2]?.value) || 0;
        
        console.log(`Item ${index + 1}: Qtd=${quantidade}, Valor=${valorUnitario}, Desconto=${desconto}`);
        
        subtotal += quantidade * valorUnitario;
        descontoTotal += desconto;
    });
    
    const total = subtotal - descontoTotal;
    
    console.log(`Totais: Subtotal=${subtotal}, Desconto=${descontoTotal}, Total=${total}`);
    
    document.getElementById('subtotalAgendamento').textContent = `R$ ${subtotal.toFixed(2).replace('.', ',')}`;
    document.getElementById('descontoTotalAgendamento').textContent = `R$ ${descontoTotal.toFixed(2).replace('.', ',')}`;
    document.getElementById('totalAgendamento').textContent = `R$ ${total.toFixed(2).replace('.', ',')}`;
}

// Salvar agendamento
function salvarAgendamento(event) {
    event.preventDefault();
    
    const pacienteId = document.getElementById('pacienteId').value;
    const profissionalId = document.getElementById('profissionalSelect').value;
    const tipoAgendamento = document.getElementById('tipoAgendamento').value;
    const data = document.getElementById('dataAgendamento').value;
    const horario = document.getElementById('horarioAgendamento').value;
    const observacoes = document.getElementById('observacoesAgendamento').value;
    
    if (!pacienteId) {
        alert('❌ Selecione um paciente');
        return;
    }
    
    if (!profissionalId) {
        alert('❌ Selecione um profissional');
        return;
    }
    
    if (!data || !horario) {
        alert('❌ Data e horário são obrigatórios');
        return;
    }
    
    // Coletar itens se for agendamento com procedimentos
    let itens = [];
    let valorTotal = 0;
    let descontoTotal = 0;
    
    if (tipoAgendamento === 'procedimentos') {
        const divItens = document.querySelectorAll('#listaItens > div');
        
        if (divItens.length === 0) {
            alert('❌ Adicione pelo menos um procedimento ou produto');
            return;
        }
        
        divItens.forEach(item => {
            const select = item.querySelector('select');
            const inputs = item.querySelectorAll('input[type="number"]');
            
            if (!select || !inputs || inputs.length < 3) {
                console.log('Item inválido encontrado, pulando...');
                return;
            }
            
            const quantidade = parseInt(inputs[0]?.value) || 0;
            const valorUnitario = parseFloat(inputs[1]?.value) || 0;
            const desconto = parseFloat(inputs[2]?.value) || 0;
            
            console.log('Processando item:', { select: select.value, quantidade, valorUnitario, desconto });
            
            if (select.value && quantidade > 0) {
                itens.push({
                    produto_id: select.value,
                    quantidade: quantidade,
                    valor_unitario: valorUnitario,
                    desconto: desconto
                });
                
                valorTotal += quantidade * valorUnitario;
                descontoTotal += desconto;
            }
        });
        
        if (itens.length === 0) {
            alert('❌ Selecione pelo menos um produto/procedimento válido');
            return;
        }
    }
    
    const dataAgendamento = `${data} ${horario}:00`;
    
    const dados = {
        paciente_id: pacienteId,
        profissional_id: profissionalId,
        data_agendamento: dataAgendamento,
        observacoes: observacoes,
        valor: valorTotal > 0 ? valorTotal : null,
        desconto: descontoTotal,
        valor_final: valorTotal - descontoTotal,
        itens: itens
    };
    
    const url = agendamentoEditando ? `/sistema/agendamentos/${agendamentoEditando}` : '/sistema/agendamentos';
    const method = agendamentoEditando ? 'PUT' : 'POST';
    const successMessage = agendamentoEditando ? 'Agendamento atualizado!' : 'Agendamento criado!';
    
    fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dados)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('✅ ' + successMessage);
            fecharModal();
            buscarAgendamentos();
        } else {
            alert('❌ ' + data.message);
        }
    })
    .catch(error => {
        console.error('Erro:', error);
        alert('❌ Erro ao salvar agendamento');
    });
}

// Carregar profissionais
function carregarProfissionais() {
    fetch('/sistema/profissionais')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const select = document.getElementById('profissionalSelect');
                select.innerHTML = '<option value="">Selecione um profissional</option>';
                data.data.forEach(prof => {
                    select.innerHTML += `<option value="${prof.id}">${prof.nome} - ${prof.especialidade || 'Geral'}</option>`;
                });
            }
        })
        .catch(error => console.error('Erro ao carregar profissionais:', error));
}

// Carregar todos os produtos
function carregarTodosProdutos() {
    console.log('Carregando produtos...');
    fetch('/sistema/produtos')
        .then(response => response.json())
        .then(data => {
            console.log('Resposta da API:', data);
            if (data.success && data.data.length > 0) {
                todosProdutos = data.data;
                console.log('Produtos carregados:', todosProdutos.length);
            } else {
                console.log('Nenhum produto encontrado');
            }
        })
        .catch(error => {
            console.error('Erro ao carregar produtos:', error);
        });
}

// Carregar produtos em um item específico
function carregarProdutosNoItem(itemId) {
    const item = document.getElementById(itemId);
    const select = item.querySelector('select');
    
    select.innerHTML = '<option value="">Selecione...</option>';
    
    todosProdutos.forEach(produto => {
        const option = document.createElement('option');
        option.value = produto.id;
        option.textContent = `${produto.nome} - ${produto.categoria}`;
        option.setAttribute('data-preco', produto.preco);
        select.appendChild(option);
    });
}



// Buscar pacientes
function buscarPacientes() {
    const busca = document.getElementById('buscaPaciente').value;
    
    if (busca.length < 2) {
        alert('❌ Digite pelo menos 2 caracteres para buscar');
        return;
    }
    
    fetch(`/sistema/pacientes/buscar?busca=${encodeURIComponent(busca)}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.data.length > 0) {
                const paciente = data.data[0];
                document.getElementById('pacienteId').value = paciente.id;
                document.getElementById('infoPaciente').innerHTML = `
                    <strong>${paciente.nome}</strong><br>
                    CPF: ${paciente.cpf}<br>
                    Telefone: ${paciente.telefone || 'Não informado'}
                `;
                document.getElementById('infoPacienteDiv').style.display = 'block';
            } else {
                alert('❌ Nenhum paciente encontrado');
                document.getElementById('infoPacienteDiv').style.display = 'none';
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('❌ Erro ao buscar paciente');
        });
}

// Event listeners simplificados
document.addEventListener('DOMContentLoaded', function() {
    // Buscar ao pressionar Enter
    document.getElementById('buscaInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            buscarAgendamentos();
        }
    });
    
    // Buscar paciente ao pressionar Enter
    document.getElementById('buscaPaciente').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            buscarPacientes();
        }
    });
    

    
    // Fechar modal ao clicar fora
    document.getElementById('modalAgendamento').addEventListener('click', function(e) {
        if (e.target === this) {
            fecharModal();
        }
    });
    
    // Event listener delegado para botões de ação
    document.addEventListener('click', function(e) {
        const button = e.target.closest('button[data-action]');
        if (button) {
            e.preventDefault();
            e.stopPropagation();
            
            const action = button.getAttribute('data-action');
            const id = button.getAttribute('data-id');
            
            console.log(`Ação ${action} clicada para ID:`, id);
            
            switch(action) {
                case 'remarcar':
                    remarcarAgendamento(id);
                    break;
                case 'editar':
                    editarProdutosAgendamento(id);
                    break;
                case 'excluir':
                    excluirAgendamento(id);
                    break;
            }
        }
    });
});



// Editar produtos/procedimentos do agendamento
function editarProdutosAgendamento(id) {
    fetch(`/sistema/agendamentos/${id}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const agendamento = data.data;
                agendamentoEditando = id;
                
                // Alterar título do modal
                document.getElementById('modalTitle').textContent = 'Editar Produtos/Procedimentos';
                
                // Preencher apenas dados básicos (não editáveis)
                document.getElementById('pacienteId').value = agendamento.paciente_id;
                document.getElementById('buscaPaciente').value = agendamento.paciente?.nome || '';
                document.getElementById('buscaPaciente').disabled = true;
                document.getElementById('infoPaciente').innerHTML = `
                    <strong>${agendamento.paciente?.nome || 'N/A'}</strong><br>
                    CPF: ${agendamento.paciente?.cpf || 'N/A'}<br>
                    Telefone: ${agendamento.paciente?.telefone || 'Não informado'}
                `;
                document.getElementById('infoPacienteDiv').style.display = 'block';
                
                document.getElementById('profissionalSelect').value = agendamento.profissional_id;
                document.getElementById('profissionalSelect').disabled = true;
                
                const dataAgendamento = new Date(agendamento.data_agendamento);
                document.getElementById('dataAgendamento').value = dataAgendamento.toISOString().split('T')[0];
                document.getElementById('dataAgendamento').disabled = true;
                document.getElementById('horarioAgendamento').value = dataAgendamento.toTimeString().slice(0, 5);
                document.getElementById('horarioAgendamento').disabled = true;
                
                // Configurar tipo de agendamento e itens
                if (agendamento.itens && agendamento.itens.length > 0) {
                    document.getElementById('tipoAgendamento').value = 'procedimentos';
                    alterarTipoAgendamento();
                    
                    // Limpar itens existentes
                    document.getElementById('listaItens').innerHTML = '';
                    
                    // Carregar itens do agendamento
                    agendamento.itens.forEach(item => {
                        adicionarItem();
                        const ultimoItem = document.querySelector('#listaItens > div:last-child');
                        const select = ultimoItem.querySelector('select');
                        const inputs = ultimoItem.querySelectorAll('input[type="number"]');
                        
                        // Aguardar produtos carregarem antes de definir valores
                        setTimeout(() => {
                            select.value = item.produto_id;
                            inputs[0].value = item.quantidade;
                            inputs[1].value = parseFloat(item.valor_unitario).toFixed(2);
                            inputs[2].value = parseFloat(item.desconto).toFixed(2);
                            calcularTotais();
                        }, 100);
                    });
                } else {
                    document.getElementById('tipoAgendamento').value = 'analise';
                    alterarTipoAgendamento();
                }
                document.getElementById('observacoesAgendamento').value = agendamento.observacoes || '';
                
                abrirModalAgendamento();
            } else {
                alert('❌ Erro ao carregar dados do agendamento');
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('❌ Erro ao carregar agendamento');
        });
}

// Excluir agendamento
function excluirAgendamento(id) {
    // Confirmação única e clara
    const confirmacao = confirm('🗑️ EXCLUIR AGENDAMENTO\n\n⚠️ Esta ação não pode ser desfeita!\n\nTem certeza que deseja excluir este agendamento?\n\n✅ OK = Excluir\n❌ Cancelar = Manter');
    
    if (!confirmacao) {
        console.log('Exclusão cancelada pelo usuário');
        return; // Usuário cancelou
    }
    
    console.log('Excluindo agendamento ID:', id);
    
    fetch(`/sistema/agendamentos/${id}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('✅ Agendamento excluído com sucesso!');
            buscarAgendamentos();
        } else {
            alert('❌ ' + data.message);
        }
    })
    .catch(error => {
        console.error('Erro:', error);
        alert('❌ Erro ao excluir agendamento');
    });
}


</script>